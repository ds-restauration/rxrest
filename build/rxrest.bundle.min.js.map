{"version":3,"file":"rxrest.bundle.min.js","sources":["../src/RxRestProxyHandler.ts","../src/utils.ts","../node_modules/component-emitter/index.js","../node_modules/superagent/lib/is-object.js","../node_modules/superagent/lib/request-base.js","../node_modules/superagent/lib/utils.js","../node_modules/superagent/lib/response-base.js","../node_modules/superagent/lib/agent-base.js","../node_modules/superagent/lib/client.js","../node_modules/tslib/tslib.es6.js","../node_modules/rxjs/_esm5/internal/util/isFunction.js","../node_modules/rxjs/_esm5/internal/config.js","../node_modules/rxjs/_esm5/internal/util/hostReportError.js","../node_modules/rxjs/_esm5/internal/Observer.js","../node_modules/rxjs/_esm5/internal/util/isArray.js","../node_modules/rxjs/_esm5/internal/util/isObject.js","../node_modules/rxjs/_esm5/internal/util/errorObject.js","../node_modules/rxjs/_esm5/internal/util/tryCatch.js","../node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js","../node_modules/rxjs/_esm5/internal/Subscription.js","../node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js","../node_modules/rxjs/_esm5/internal/Subscriber.js","../node_modules/rxjs/_esm5/internal/util/toSubscriber.js","../node_modules/rxjs/_esm5/internal/symbol/observable.js","../node_modules/rxjs/_esm5/internal/util/noop.js","../node_modules/rxjs/_esm5/internal/util/pipe.js","../node_modules/rxjs/_esm5/internal/Observable.js","../node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js","../node_modules/rxjs/_esm5/internal/SubjectSubscription.js","../node_modules/rxjs/_esm5/internal/Subject.js","../node_modules/rxjs/_esm5/internal/operators/refCount.js","../node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js","../node_modules/rxjs/_esm5/internal/operators/groupBy.js","../node_modules/rxjs/_esm5/internal/BehaviorSubject.js","../node_modules/rxjs/_esm5/internal/scheduler/Action.js","../node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js","../node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js","../node_modules/rxjs/_esm5/internal/Scheduler.js","../node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js","../node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js","../node_modules/rxjs/_esm5/internal/scheduler/queue.js","../node_modules/rxjs/_esm5/internal/observable/empty.js","../node_modules/rxjs/_esm5/internal/util/isScheduler.js","../node_modules/rxjs/_esm5/internal/util/subscribeToArray.js","../node_modules/rxjs/_esm5/internal/observable/fromArray.js","../node_modules/rxjs/_esm5/internal/observable/scalar.js","../node_modules/rxjs/_esm5/internal/observable/of.js","../node_modules/rxjs/_esm5/internal/observable/throwError.js","../node_modules/rxjs/_esm5/internal/Notification.js","../node_modules/rxjs/_esm5/internal/operators/observeOn.js","../node_modules/rxjs/_esm5/internal/ReplaySubject.js","../node_modules/rxjs/_esm5/internal/AsyncSubject.js","../node_modules/rxjs/_esm5/internal/util/Immediate.js","../node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js","../node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js","../node_modules/rxjs/_esm5/internal/scheduler/asap.js","../node_modules/rxjs/_esm5/internal/scheduler/async.js","../node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js","../node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js","../node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js","../node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js","../node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js","../node_modules/rxjs/_esm5/internal/util/EmptyError.js","../node_modules/rxjs/_esm5/internal/util/TimeoutError.js","../node_modules/rxjs/_esm5/internal/operators/map.js","../node_modules/rxjs/_esm5/internal/OuterSubscriber.js","../node_modules/rxjs/_esm5/internal/InnerSubscriber.js","../node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js","../node_modules/rxjs/_esm5/internal/symbol/iterator.js","../node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js","../node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js","../node_modules/rxjs/_esm5/internal/util/isArrayLike.js","../node_modules/rxjs/_esm5/internal/util/isPromise.js","../node_modules/rxjs/_esm5/internal/util/subscribeTo.js","../node_modules/rxjs/_esm5/internal/util/subscribeToResult.js","../node_modules/rxjs/_esm5/internal/observable/combineLatest.js","../node_modules/rxjs/_esm5/internal/util/isInteropObservable.js","../node_modules/rxjs/_esm5/internal/util/isIterable.js","../node_modules/rxjs/_esm5/internal/observable/fromPromise.js","../node_modules/rxjs/_esm5/internal/observable/fromIterable.js","../node_modules/rxjs/_esm5/internal/observable/fromObservable.js","../node_modules/rxjs/_esm5/internal/observable/from.js","../node_modules/rxjs/_esm5/internal/operators/mergeMap.js","../node_modules/rxjs/_esm5/internal/observable/forkJoin.js","../node_modules/rxjs/_esm5/internal/util/isNumeric.js","../node_modules/rxjs/_esm5/internal/observable/race.js","../node_modules/rxjs/_esm5/internal/observable/zip.js","../node_modules/rxjs/_esm5/internal/operators/audit.js","../node_modules/rxjs/_esm5/internal/operators/buffer.js","../node_modules/rxjs/_esm5/internal/operators/bufferCount.js","../node_modules/rxjs/_esm5/internal/operators/bufferTime.js","../node_modules/rxjs/_esm5/internal/operators/bufferToggle.js","../node_modules/rxjs/_esm5/internal/operators/bufferWhen.js","../node_modules/rxjs/_esm5/internal/operators/catchError.js","../node_modules/rxjs/_esm5/internal/operators/concatMap.js","../node_modules/rxjs/_esm5/internal/operators/count.js","../node_modules/rxjs/_esm5/internal/operators/debounce.js","../node_modules/rxjs/_esm5/internal/operators/debounceTime.js","../node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js","../node_modules/rxjs/_esm5/internal/operators/delay.js","../node_modules/rxjs/_esm5/internal/operators/delayWhen.js","../node_modules/rxjs/_esm5/internal/operators/dematerialize.js","../node_modules/rxjs/_esm5/internal/operators/distinct.js","../node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js","../node_modules/rxjs/_esm5/internal/operators/filter.js","../node_modules/rxjs/_esm5/internal/operators/tap.js","../node_modules/rxjs/_esm5/internal/operators/take.js","../node_modules/rxjs/_esm5/internal/operators/every.js","../node_modules/rxjs/_esm5/internal/operators/exhaust.js","../node_modules/rxjs/_esm5/internal/operators/exhaustMap.js","../node_modules/rxjs/_esm5/internal/operators/expand.js","../node_modules/rxjs/_esm5/internal/operators/finalize.js","../node_modules/rxjs/_esm5/internal/operators/find.js","../node_modules/rxjs/_esm5/internal/operators/ignoreElements.js","../node_modules/rxjs/_esm5/internal/operators/isEmpty.js","../node_modules/rxjs/_esm5/internal/operators/takeLast.js","../node_modules/rxjs/_esm5/internal/operators/mapTo.js","../node_modules/rxjs/_esm5/internal/operators/materialize.js","../node_modules/rxjs/_esm5/internal/operators/scan.js","../node_modules/rxjs/_esm5/internal/operators/mergeScan.js","../node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js","../node_modules/rxjs/_esm5/internal/operators/pairwise.js","../node_modules/rxjs/_esm5/internal/operators/repeat.js","../node_modules/rxjs/_esm5/internal/operators/repeatWhen.js","../node_modules/rxjs/_esm5/internal/operators/retry.js","../node_modules/rxjs/_esm5/internal/operators/retryWhen.js","../node_modules/rxjs/_esm5/internal/operators/sample.js","../node_modules/rxjs/_esm5/internal/operators/sampleTime.js","../node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js","../node_modules/rxjs/_esm5/internal/operators/single.js","../node_modules/rxjs/_esm5/internal/operators/skip.js","../node_modules/rxjs/_esm5/internal/operators/skipLast.js","../node_modules/rxjs/_esm5/internal/operators/skipUntil.js","../node_modules/rxjs/_esm5/internal/operators/skipWhile.js","../node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js","../node_modules/rxjs/_esm5/internal/operators/switchMap.js","../node_modules/rxjs/_esm5/internal/operators/takeUntil.js","../node_modules/rxjs/_esm5/internal/operators/takeWhile.js","../node_modules/rxjs/_esm5/internal/operators/throttle.js","../node_modules/rxjs/_esm5/internal/operators/throttleTime.js","../node_modules/rxjs/_esm5/internal/operators/timeoutWith.js","../node_modules/rxjs/_esm5/internal/operators/window.js","../node_modules/rxjs/_esm5/internal/operators/windowCount.js","../node_modules/rxjs/_esm5/internal/operators/windowTime.js","../node_modules/rxjs/_esm5/internal/operators/windowToggle.js","../node_modules/rxjs/_esm5/internal/operators/windowWhen.js","../node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js","../src/fetch.ts","../src/RxRestConfiguration.ts","../src/RxRest.ts","../src/index.ts"],"sourcesContent":["import {RxRest} from './RxRest'\n\nexport class RxRestProxyHandler<F, T> implements ProxyHandler<RxRest<F, T>> {\n  private $internal: PropertyKey[] = [];\n  private $instance: F;\n\n  constructor(target: F) {\n    this.$instance = target\n    do {\n      this.$internal = this.$internal.concat(\n        Object.getOwnPropertyNames(target), Object.getOwnPropertySymbols(target)\n      )\n    } while (target = Object.getPrototypeOf(target))\n  }\n\n  getPrototypeOf(target: any) {\n    return Object.getPrototypeOf(this.$instance)\n  }\n\n  defineProperty(target: any, p: PropertyKey, attributes: PropertyDescriptor): boolean {\n    if (~this.$internal.indexOf(p)) {\n      return true\n    }\n\n    Object.defineProperty(target, p, attributes)\n    return true\n  }\n\n  deleteProperty(target: any, p: PropertyKey): boolean {\n    return delete target[p]\n  }\n\n  set(target: any, p: PropertyKey, value: any, receiver: any): boolean {\n\n    if (~this.$internal.indexOf(p)) {\n      this.$instance[p] = value\n      return true\n    }\n\n    if ((this.$instance as any).$pristine === true && target[p] !== value) {\n      (this.$instance as any).$pristine = false\n    }\n\n    target[p] = value\n    return true\n  }\n\n  get(target: any, p: PropertyKey, receiver: any): any {\n    if (~this.$internal.indexOf(p)) {\n      return this.$instance[p]\n    }\n\n    return target[p]\n  }\n}\n","export function objectToMap(map: URLSearchParams | Headers, item: any): any {\n  for (let key in item) {\n    if (Array.isArray(item[key])) {\n      for (let i = 0; i < item[key].length; i++) {\n        map.append(key, item[key][i])\n      }\n    } else {\n      map.append(key, item[key])\n    }\n  }\n\n  return map\n}\n\n/**\n * UUID generator https://gist.github.com/jed/982883\n */\nexport function uuid(a: any = '', b: any = '') {\n  for (; a++ < 36; b += a * 51 & 52 ? (\n    a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4\n  ).toString(16) : '-') {\n    //\n  }\n  return b\n}\n","\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n","'use strict';\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return null !== obj && 'object' === typeof obj;\n}\n\nmodule.exports = isObject;\n","'use strict';\n\n/**\n * Module of mixed-in functions shared between node and client code\n */\nvar isObject = require('./is-object');\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in RequestBase.prototype) {\n    obj[key] = RequestBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function _clearTimeout(){\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function parse(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function(val){\n  this._responseType = val;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function serialize(fn){\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function timeout(options){\n  if (!options || 'object' !== typeof options) {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    return this;\n  }\n\n  for(var option in options) {\n    switch(option) {\n      case 'deadline':\n        this._timeout = options.deadline;\n        break;\n      case 'response':\n        this._responseTimeout = options.response;\n        break;\n      default:\n        console.warn(\"Unknown timeout option\", option);\n    }\n  }\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @param {Function} [fn]\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function retry(count, fn){\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  this._retryCallback = fn;\n  return this;\n};\n\nvar ERROR_CODES = [\n  'ECONNRESET',\n  'ETIMEDOUT',\n  'EADDRINFO',\n  'ESOCKETTIMEDOUT'\n];\n\n/**\n * Determine if a request should be retried.\n * (Borrowed from segmentio/superagent-retry)\n *\n * @param {Error} err\n * @param {Response} [res]\n * @returns {Boolean}\n */\nRequestBase.prototype._shouldRetry = function(err, res) {\n  if (!this._maxRetries || this._retries++ >= this._maxRetries) {\n    return false;\n  }\n  if (this._retryCallback) {\n    try {\n      var override = this._retryCallback(err, res);\n      if (override === true) return true;\n      if (override === false) return false;\n      // undefined falls back to defaults\n    } catch(e) {\n      console.error(e);\n    }\n  }\n  if (res && res.status && res.status >= 500 && res.status != 501) return true;\n  if (err) {\n    if (err.code && ~ERROR_CODES.indexOf(err.code)) return true;\n    // Superagent timeout\n    if (err.timeout && err.code == 'ECONNABORTED') return true;\n    if (err.crossDomain) return true;\n  }\n  return false;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function() {\n\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n\n  this._aborted = false;\n  this.timedout = false;\n\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function then(resolve, reject) {\n  if (!this._fullfilledPromise) {\n    var self = this;\n    if (this._endCalled) {\n      console.warn(\"Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises\");\n    }\n    this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {\n      self.end(function(err, res) {\n        if (err) innerReject(err);\n        else innerResolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n};\n\nRequestBase.prototype['catch'] = function(cb) {\n  return this.then(undefined, cb);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function use(fn) {\n  fn(this);\n  return this;\n};\n\nRequestBase.prototype.ok = function(cb) {\n  if ('function' !== typeof cb) throw Error(\"Callback required\");\n  this._okCallback = cb;\n  return this;\n};\n\nRequestBase.prototype._isResponseOK = function(res) {\n  if (!res) {\n    return false;\n  }\n\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n\n  return res.status >= 200 && res.status < 300;\n};\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n */\nRequestBase.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name\n * @param {String|Blob|File|Buffer|fs.ReadStream} val\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function(name, val) {\n  // name should be either a string or an object.\n  if (null === name || undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n\n  if (this._data) {\n    console.error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObject(name)) {\n    for (var key in name) {\n      this.field(key, name[key]);\n    }\n    return this;\n  }\n\n  if (Array.isArray(val)) {\n    for (var i in val) {\n      this.field(name, val[i]);\n    }\n    return this;\n  }\n\n  // val should be defined now\n  if (null === val || undefined === val) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n  if ('boolean' === typeof val) {\n    val = '' + val;\n  }\n  this._getFormData().append(name, val);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\nRequestBase.prototype.abort = function(){\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  this.xhr && this.xhr.abort(); // browser\n  this.req && this.req.abort(); // node\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\nRequestBase.prototype._auth = function(user, pass, options, base64Encoder) {\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', 'Basic ' + base64Encoder(user + ':' + pass));\n      break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n\n    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', 'Bearer ' + user);\n      break;\n  }\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function(on) {\n  // This is browser-only functionality. Node side is no-op.\n  if (on == undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does noting in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function(n){\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Maximum size of buffered response body, in bytes. Counts uncompressed size.\n * Default 200MB.\n *\n * @param {Number} n\n * @return {Request} for chaining\n */\nRequestBase.prototype.maxResponseSize = function(n){\n  if ('number' !== typeof n) {\n    throw TypeError(\"Invalid argument\");\n  }\n  this._maxResponseSize = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function() {\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header,\n  };\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.send = function(data){\n  var isObj = isObject(data);\n  var type = this._header['content-type'];\n\n  if (this._formData) {\n    console.error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObj && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!isObj || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function(sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\nRequestBase.prototype._finalizeQueryString = function(){\n  var query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;\n  }\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    var index = this.url.indexOf('?');\n    if (index >= 0) {\n      var queryArr = this.url.substring(index + 1).split('&');\n      if ('function' === typeof this._sort) {\n        queryArr.sort(this._sort);\n      } else {\n        queryArr.sort();\n      }\n      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');\n    }\n  }\n};\n\n// For backwards compat only\nRequestBase.prototype._appendQueryString = function() {console.trace(\"Unsupported\");}\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function(reason, timeout, errno){\n  if (this._aborted) {\n    return;\n  }\n  var err = new Error(reason + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  err.code = 'ECONNABORTED';\n  err.errno = errno;\n  this.timedout = true;\n  this.abort();\n  this.callback(err);\n};\n\nRequestBase.prototype._setTimeouts = function() {\n  var self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(function(){\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n};\n","'use strict';\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = function(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = function(str){\n  return str.split(/ *; */).reduce(function(obj, str){\n    var parts = str.split(/ *= */);\n    var key = parts.shift();\n    var val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = function(str){\n  return str.split(/ *, */).reduce(function(obj, str){\n    var parts = str.split(/ *; */);\n    var url = parts[0].slice(1, -1);\n    var rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    obj[rel] = url;\n    return obj;\n  }, {});\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = function(header, changesOrigin){\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header['host'];\n  // secuirty\n  if (changesOrigin) {\n    delete header['authorization'];\n    delete header['cookie'];\n  }\n  return header;\n};\n","'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    obj[key] = ResponseBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function(field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function(header){\n    // TODO: moar!\n    // TODO: make this a util\n\n    // content-type\n    var ct = header['content-type'] || '';\n    this.type = utils.type(ct);\n\n    // params\n    var params = utils.params(ct);\n    for (var key in params) this[key] = params[key];\n\n    this.links = {};\n\n    // links\n    try {\n        if (header.link) {\n            this.links = utils.parseLinks(header.link);\n        }\n    } catch (err) {\n        // ignore\n    }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = this.statusCode = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.redirect = 3 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = (4 == type || 5 == type)\n        ? this.toError()\n        : false;\n\n    // sugar\n    this.created = 201 == status;\n    this.accepted = 202 == status;\n    this.noContent = 204 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.forbidden = 403 == status;\n    this.notFound = 404 == status;\n    this.unprocessableEntity = 422 == status;\n};\n","function Agent() {\n  this._defaults = [];\n}\n\n[\"use\", \"on\", \"once\", \"set\", \"query\", \"type\", \"accept\", \"auth\", \"withCredentials\", \"sortQuery\", \"retry\", \"ok\", \"redirects\",\n \"timeout\", \"buffer\", \"serialize\", \"parse\", \"ca\", \"key\", \"pfx\", \"cert\"].forEach(function(fn) {\n  /** Default setting for all requests from this agent */\n  Agent.prototype[fn] = function(/*varargs*/) {\n    this._defaults.push({fn:fn, arguments:arguments});\n    return this;\n  }\n});\n\nAgent.prototype._setDefaults = function(req) {\n    this._defaults.forEach(function(def) {\n      req[def.fn].apply(req, def.arguments);\n    });\n};\n\nmodule.exports = Agent;\n","/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  console.warn(\"Using browser-only version of superagent in non-browser environment\");\n  root = this;\n}\n\nvar Emitter = require('component-emitter');\nvar RequestBase = require('./request-base');\nvar isObject = require('./is-object');\nvar ResponseBase = require('./response-base');\nvar Agent = require('./agent-base');\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Expose `request`.\n */\n\nvar request = exports = module.exports = function(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new exports.Request('GET', method);\n  }\n\n  return new exports.Request(method, url);\n}\n\nexports.Request = Request;\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  throw Error(\"Browser-only version of superagent could not find XHR\");\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    pushEncodedKeyValuePair(pairs, key, obj[key]);\n  }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (val != null) {\n    if (Array.isArray(val)) {\n      val.forEach(function(v) {\n        pushEncodedKeyValuePair(pairs, key, v);\n      });\n    } else if (isObject(val)) {\n      for(var subkey in val) {\n        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);\n      }\n    } else {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(val));\n    }\n  } else if (val === null) {\n    pairs.push(encodeURIComponent(key));\n  }\n}\n\n/**\n * Expose serialization method.\n */\n\nrequest.serializeObject = serialize;\n\n/**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var pair;\n  var pos;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    pos = pair.indexOf('=');\n    if (pos == -1) {\n      obj[decodeURIComponent(pair)] = '';\n    } else {\n      obj[decodeURIComponent(pair.slice(0, pos))] =\n        decodeURIComponent(pair.slice(pos + 1));\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'text/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nrequest.serialize = {\n  'application/x-www-form-urlencoded': serialize,\n  'application/json': JSON.stringify\n};\n\n/**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    if (index === -1) { // could be empty line, just skip it\n      continue;\n    }\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  // should match /json or +json\n  // but not /json-seq\n  return /[\\/+]json($|[^-\\w])/.test(mime);\n}\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req) {\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  var status = this.xhr.status;\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n  this._setStatusProperties(status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this._setHeaderProperties(this.header);\n\n  if (null === this.text && req._responseType) {\n    this.body = this.xhr.response;\n  } else {\n    this.body = this.req.method != 'HEAD'\n      ? this._parseBody(this.text ? this.text : this.xhr.response)\n      : null;\n  }\n}\n\nResponseBase(Response.prototype);\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype._parseBody = function(str) {\n  var parse = request.parse[this.type];\n  if (this.req._parser) {\n    return this.req._parser(this, str);\n  }\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      if (self.xhr) {\n        // ie9 doesn't have 'response' property\n        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;\n        // issue #876: return the http status code if the response parsing fails\n        err.status = self.xhr.status ? self.xhr.status : null;\n        err.statusCode = err.status; // backwards-compat only\n      } else {\n        err.rawResponse = null;\n        err.status = null;\n      }\n\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    var new_err;\n    try {\n      if (!self._isResponseOK(res)) {\n        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n      }\n    } catch(custom_err) {\n      new_err = custom_err; // ok() callback can throw\n    }\n\n    // #1000 don't catch errors from the callback to avoid double calling it\n    if (new_err) {\n      new_err.original = err;\n      new_err.response = res;\n      new_err.status = res.status;\n      self.callback(new_err, res);\n    } else {\n      self.callback(null, res);\n    }\n  });\n}\n\n/**\n * Mixin `Emitter` and `RequestBase`.\n */\n\nEmitter(Request.prototype);\nRequestBase(Request.prototype);\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} [pass] optional in case of using 'bearer' as type\n * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (1 === arguments.length) pass = '';\n  if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options\n    options = pass;\n    pass = '';\n  }\n  if (!options) {\n    options = {\n      type: 'function' === typeof btoa ? 'basic' : 'auto',\n    };\n  }\n\n  var encoder = function(string) {\n    if ('function' === typeof btoa) {\n      return btoa(string);\n    }\n    throw new Error('Cannot use basic auth, btoa is not a function');\n  };\n\n  return this._auth(user, pass, options, encoder);\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('/upload')\n *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, options){\n  if (file) {\n    if (this._data) {\n      throw Error(\"superagent can't mix .send() and .attach()\");\n    }\n\n    this._getFormData().append(field, file, options || file.name);\n  }\n  return this;\n};\n\nRequest.prototype._getFormData = function(){\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  if (this._shouldRetry(err, res)) {\n    return this._retry();\n  }\n\n  var fn = this._callback;\n  this.clearTimeout();\n\n  if (err) {\n    if (this._maxRetries) err.retries = this._retries - 1;\n    this.emit('error', err);\n  }\n\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n// This only warns, because the request is still likely to work\nRequest.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){\n  console.warn(\"This is not supported in browser version of superagent\");\n  return this;\n};\n\n// This throws, because it can't send/receive data as expected\nRequest.prototype.pipe = Request.prototype.write = function(){\n  throw Error(\"Streaming is not supported in browser version of superagent\");\n};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\nRequest.prototype._isHost = function _isHost(obj) {\n  // Native objects stringify to [object File], [object Blob], [object FormData], etc.\n  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';\n}\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  if (this._endCalled) {\n    console.warn(\"Warning: .end() was called twice. This is not supported in superagent\");\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // querystring\n  this._finalizeQueryString();\n\n  return this._end();\n};\n\nRequest.prototype._end = function() {\n  var self = this;\n  var xhr = (this.xhr = request.getXHR());\n  var data = this._formData || this._data;\n\n  this._setTimeouts();\n\n  // state change\n  xhr.onreadystatechange = function(){\n    var readyState = xhr.readyState;\n    if (readyState >= 2 && self._responseTimeoutTimer) {\n      clearTimeout(self._responseTimeoutTimer);\n    }\n    if (4 != readyState) {\n      return;\n    }\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (!status) {\n      if (self.timedout || self._aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(direction, e) {\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = direction;\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    try {\n      xhr.onprogress = handleProgress.bind(null, 'download');\n      if (xhr.upload) {\n        xhr.upload.onprogress = handleProgress.bind(null, 'upload');\n      }\n    } catch(e) {\n      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n      // Reported here:\n      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n    }\n  }\n\n  // initiate request\n  try {\n    if (this.username && this.password) {\n      xhr.open(this.method, this.url, true, this.username, this.password);\n    } else {\n      xhr.open(this.method, this.url, true);\n    }\n  } catch (err) {\n    // see #1149\n    return this.callback(err);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) {\n      serialize = request.serialize['application/json'];\n    }\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n\n    if (this.header.hasOwnProperty(field))\n      xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\nrequest.agent = function() {\n  return new Agent();\n};\n\n[\"GET\", \"POST\", \"OPTIONS\", \"PATCH\", \"PUT\", \"DELETE\"].forEach(function(method) {\n  Agent.prototype[method.toLowerCase()] = function(url, fn) {\n    var req = new request.Request(method, url);\n    this._setDefaults(req);\n    if (fn) {\n      req.end(fn);\n    }\n    return req;\n  };\n});\n\nAgent.prototype.del = Agent.prototype['delete'];\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn) {\n  var req = request('GET', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn) {\n  var req = request('HEAD', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * OPTIONS query to `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.options = function(url, data, fn) {\n  var req = request('OPTIONS', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nfunction del(url, data, fn) {\n  var req = request('DELETE', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n}\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn) {\n  var req = request('PATCH', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn) {\n  var req = request('POST', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn) {\n  var req = request('PUT', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport var config = {\n    /**\n     * The promise constructor used by default for methods such as\n     * {@link toPromise} and {@link forEach}\n     */\n    Promise: undefined,\n    /**\n     * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n     * call in a try/catch block. It also enables producer interference, a nasty bug\n     * where a multicast can be broken for all observers by a downstream consumer with\n     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n     * FOR MIGRATION REASONS.\n     */\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = /*@__PURE__*/ new Error();\n            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function hostReportError(err) {\n    setTimeout(function () { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map\n","/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n","// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n","/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        var _this = _super.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '') || this;\n        _this.errors = errors;\n        _this.name = 'UnsubscriptionError';\n        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);\n        return _this;\n    }\n    return UnsubscriptionError;\n}(Error));\nexport { UnsubscriptionError };\n//# sourceMappingURL=UnsubscriptionError.js.map\n","/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = /*@__PURE__*/ (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        /** @internal */\n        this._parent = null;\n        /** @internal */\n        this._parents = null;\n        /** @internal */\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    /** @internal */\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    /** @nocollapse */\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? /*@__PURE__*/ Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        /** @internal */ _this.syncErrorValue = null;\n        /** @internal */ _this.syncErrorThrown = false;\n        /** @internal */ _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n                    // node_modules, we cannot rely on `instanceof` checks\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriberSymbol]();\n                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        _this.destination = trustedSubscriber;\n                        trustedSubscriber.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     * @nocollapse\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n//# sourceMappingURL=Subscriber.js.map\n","/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n","/** Symbol.observable or a string \"@@observable\". Used for interop */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map\n","/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n","/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */\nimport { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n","/** PURE_IMPORTS_START _util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = /*@__PURE__*/ (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        /** Internal implementation detail, do not use directly. */\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Observable.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     * @nocollapse\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var _this = _super.call(this, 'object unsubscribed') || this;\n        _this.name = 'ObjectUnsubscribedError';\n        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);\n        return _this;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexport { ObjectUnsubscribedError };\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\nexport { SubjectSubscription };\n//# sourceMappingURL=SubjectSubscription.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\nexport { SubjectSubscriber };\n/**\n * @class Subject<T>\n */\nvar Subject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    /**@nocollapse */\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        /** @internal */\n        _this._isComplete = false;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nvar GroupByOperator = /*@__PURE__*/ (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.elementSelector = elementSelector;\n        _this.durationSelector = durationSelector;\n        _this.subjectSelector = subjectSelector;\n        _this.groups = null;\n        _this.attemptedToUnsubscribe = false;\n        _this.count = 0;\n        return _this;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        var _this = _super.call(this, group) || this;\n        _this.key = key;\n        _this.group = group;\n        _this.parent = parent;\n        return _this;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupedObservable, _super);\n    /** @deprecated Do not construct this type. Internal use only */\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.groupSubject = groupSubject;\n        _this.refCountSubscription = refCountSubscription;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable));\nexport { GroupedObservable };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        parent.count++;\n        return _this;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription));\n//# sourceMappingURL=groupBy.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject));\nexport { BehaviorSubject };\n//# sourceMappingURL=BehaviorSubject.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Action, _super);\n    function Action(scheduler, work) {\n        return _super.call(this) || this;\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription));\nexport { Action };\n//# sourceMappingURL=Action.js.map\n","/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\nexport { AsyncAction };\n//# sourceMappingURL=AsyncAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction));\nexport { QueueAction };\n//# sourceMappingURL=QueueAction.js.map\n","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nvar Scheduler = /*@__PURE__*/ (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    /** @nocollapse */\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexport { Scheduler };\n//# sourceMappingURL=Scheduler.js.map\n","/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Scheduler } from '../Scheduler';\nvar AsyncScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncScheduler, _super);\n    function AsyncScheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        var _this = _super.call(this, SchedulerAction, function () {\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\n                return AsyncScheduler.delegate.now();\n            }\n            else {\n                return now();\n            }\n        }) || this;\n        _this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         * @deprecated internal use only\n         */\n        _this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         * @deprecated internal use only\n         */\n        _this.scheduled = undefined;\n        return _this;\n    }\n    AsyncScheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n            return AsyncScheduler.delegate.schedule(work, delay, state);\n        }\n        else {\n            return _super.prototype.schedule.call(this, work, delay, state);\n        }\n    };\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\nexport { AsyncScheduler };\n//# sourceMappingURL=AsyncScheduler.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar QueueScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QueueScheduler;\n}(AsyncScheduler));\nexport { QueueScheduler };\n//# sourceMappingURL=QueueScheduler.js.map\n","/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */\nimport { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then complete.</caption>\n * var result = Rx.Observable.empty().startWith(7);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n * var interval = Rx.Observable.interval(1000);\n * var result = interval.mergeMap(x =>\n *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nexport function emptyScheduled(scheduler) {\n    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });\n}\n//# sourceMappingURL=empty.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n","/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var subscribeToArray = function (array) {\n    return function (subscriber) {\n        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        if (!subscriber.closed) {\n            subscriber.complete();\n        }\n    };\n};\n//# sourceMappingURL=subscribeToArray.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function scalar(value) {\n    var result = new Observable(function (subscriber) {\n        subscriber.next(value);\n        subscriber.complete();\n    });\n    result._isScalar = true;\n    result.value = value;\n    return result;\n}\n//# sourceMappingURL=scalar.js.map\n","/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nexport function of() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = args[args.length - 1];\n    if (isScheduler(scheduler)) {\n        args.pop();\n    }\n    else {\n        scheduler = undefined;\n    }\n    switch (args.length) {\n        case 0:\n            return empty(scheduler);\n        case 1:\n            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);\n        default:\n            return fromArray(args, scheduler);\n    }\n}\n//# sourceMappingURL=of.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then emit an error.</caption>\n * import { throwError, concat, of } from 'rxjs/create';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n * import { throwError, interval, of } from 'rxjs/create';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13 ?\n *     throwError('Thirteens are bad') :\n *     of('a', 'b', 'c')\n *   )\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error, scheduler) {\n    if (!scheduler) {\n        return new Observable(function (subscriber) { return subscriber.error(error); });\n    }\n    else {\n        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });\n    }\n}\nfunction dispatch(_a) {\n    var error = _a.error, subscriber = _a.subscriber;\n    subscriber.error(error);\n}\n//# sourceMappingURL=throwError.js.map\n","/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = /*@__PURE__*/ (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return of(this.value);\n            case 'E':\n                return throwError(this.error);\n            case 'C':\n                return empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     * @nocollapse\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexport { Notification };\n//# sourceMappingURL=Notification.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nvar ObserveOnOperator = /*@__PURE__*/ (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexport { ObserveOnOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.scheduler = scheduler;\n        _this.delay = delay;\n        return _this;\n    }\n    /** @nocollapse */\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber));\nexport { ObserveOnSubscriber };\nvar ObserveOnMessage = /*@__PURE__*/ (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexport { ObserveOnMessage };\n//# sourceMappingURL=observeOn.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this) || this;\n        _this.scheduler = scheduler;\n        _this._events = [];\n        _this._infiniteTimeWindow = false;\n        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        _this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            _this._infiniteTimeWindow = true;\n            _this.next = _this.nextInfiniteTimeWindow;\n        }\n        else {\n            _this.next = _this.nextTimeWindow;\n        }\n        return _this;\n    }\n    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {\n        var _events = this._events;\n        _events.push(value);\n        // Since this method is invoked in every next() call than the buffer\n        // can overgrow the max size only by one item\n        if (_events.length > this._bufferSize) {\n            _events.shift();\n        }\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype.nextTimeWindow = function (value) {\n        this._events.push(new ReplayEvent(this._getNow(), value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n        var _infiniteTimeWindow = this._infiniteTimeWindow;\n        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var len = _events.length;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nexport { ReplaySubject };\nvar ReplayEvent = /*@__PURE__*/ (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { Subscription } from './Subscription';\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.value = null;\n        _this.hasNext = false;\n        _this.hasCompleted = false;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject));\nexport { AsyncSubject };\n//# sourceMappingURL=AsyncSubject.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar nextHandle = 1;\nvar tasksByHandle = {};\nfunction runIfPresent(handle) {\n    var cb = tasksByHandle[handle];\n    if (cb) {\n        cb();\n    }\n}\nexport var Immediate = {\n    setImmediate: function (cb) {\n        var handle = nextHandle++;\n        tasksByHandle[handle] = cb;\n        Promise.resolve().then(function () { return runIfPresent(handle); });\n        return handle;\n    },\n    clearImmediate: function (handle) {\n        delete tasksByHandle[handle];\n    },\n};\n//# sourceMappingURL=Immediate.js.map\n","/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction));\nexport { AsapAction };\n//# sourceMappingURL=AsapAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AsapScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler));\nexport { AsapScheduler };\n//# sourceMappingURL=AsapScheduler.js.map\n","/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */\nimport { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexport var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);\n//# sourceMappingURL=asap.js.map\n","/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction));\nexport { AnimationFrameAction };\n//# sourceMappingURL=AnimationFrameAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AnimationFrameScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler));\nexport { AnimationFrameScheduler };\n//# sourceMappingURL=AnimationFrameScheduler.js.map\n","/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */\nimport { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.animationFrame.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexport var animationFrame = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);\n//# sourceMappingURL=animationFrame.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nvar VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(VirtualTimeScheduler, _super);\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n        if (SchedulerAction === void 0) {\n            SchedulerAction = VirtualAction;\n        }\n        if (maxFrames === void 0) {\n            maxFrames = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;\n        _this.maxFrames = maxFrames;\n        _this.frame = 0;\n        _this.index = -1;\n        return _this;\n    }\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    VirtualTimeScheduler.prototype.flush = function () {\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n        var error, action;\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    VirtualTimeScheduler.frameTimeFactor = 10;\n    return VirtualTimeScheduler;\n}(AsyncScheduler));\nexport { VirtualTimeScheduler };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar VirtualAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(VirtualAction, _super);\n    function VirtualAction(scheduler, work, index) {\n        if (index === void 0) {\n            index = scheduler.index += 1;\n        }\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.index = index;\n        _this.active = true;\n        _this.index = scheduler.index = index;\n        return _this;\n    }\n    VirtualAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (!this.id) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.active = false;\n        // If an action is rescheduled, we save allocations by mutating its state,\n        // pushing it to the end of the scheduler queue, and recycling the action.\n        // But since the VirtualTimeScheduler is used for testing, VirtualActions\n        // must be immutable so they can be inspected later.\n        var action = new VirtualAction(this.scheduler, this.work);\n        this.add(action);\n        return action.schedule(state, delay);\n    };\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.delay = scheduler.frame + delay;\n        var actions = scheduler.actions;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    };\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return undefined;\n    };\n    VirtualAction.prototype._execute = function (state, delay) {\n        if (this.active === true) {\n            return _super.prototype._execute.call(this, state, delay);\n        }\n    };\n    VirtualAction.sortActions = function (a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    return VirtualAction;\n}(AsyncAction));\nexport { VirtualAction };\n//# sourceMappingURL=VirtualTimeScheduler.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var _this = _super.call(this, 'argument out of range') || this;\n        _this.name = 'ArgumentOutOfRangeError';\n        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);\n        return _this;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexport { ArgumentOutOfRangeError };\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EmptyError, _super);\n    function EmptyError() {\n        var _this = _super.call(this, 'no elements in sequence') || this;\n        _this.name = 'EmptyError';\n        Object.setPrototypeOf(_this, EmptyError.prototype);\n        return _this;\n    }\n    return EmptyError;\n}(Error));\nexport { EmptyError };\n//# sourceMappingURL=EmptyError.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TimeoutError, _super);\n    function TimeoutError() {\n        var _this = _super.call(this, 'Timeout has occurred') || this;\n        _this.name = 'TimeoutError';\n        Object.setPrototypeOf(_this, TimeoutError.prototype);\n        return _this;\n    }\n    return TimeoutError;\n}(Error));\nexport { TimeoutError };\n//# sourceMappingURL=TimeoutError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexport { MapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.count = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\nexport { OuterSubscriber };\n//# sourceMappingURL=OuterSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.outerValue = outerValue;\n        _this.outerIndex = outerIndex;\n        _this.index = 0;\n        return _this;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\nexport { InnerSubscriber };\n//# sourceMappingURL=InnerSubscriber.js.map\n","/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */\nimport { hostReportError } from './hostReportError';\nexport var subscribeToPromise = function (promise) {\n    return function (subscriber) {\n        promise.then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, hostReportError);\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToPromise.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = /*@__PURE__*/ getSymbolIterator();\n/**\n * @deprecated use {@link iterator} instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n","/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) {\n    return function (subscriber) {\n        var iterator = iterable[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                subscriber.complete();\n                break;\n            }\n            subscriber.next(item.value);\n            if (subscriber.closed) {\n                break;\n            }\n        } while (true);\n        // Finalize the iterator if it happens to be a Generator\n        if (typeof iterator.return === 'function') {\n            subscriber.add(function () {\n                if (iterator.return) {\n                    iterator.return();\n                }\n            });\n        }\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToIterable.js.map\n","/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\nimport { observable as Symbol_observable } from '../symbol/observable';\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport var subscribeToObservable = function (obj) {\n    return function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            // Should be caught by observable subscribe function error handling.\n            throw new TypeError('Provided object does not correctly implement Symbol.observable');\n        }\n        else {\n            return obs.subscribe(subscriber);\n        }\n    };\n};\n//# sourceMappingURL=subscribeToObservable.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n","/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (result instanceof Observable) {\n        return function (subscriber) {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n","/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map\n","/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nvar NONE = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var resultSelector = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        resultSelector = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nvar CombineLatestOperator = /*@__PURE__*/ (function () {\n    function CombineLatestOperator(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n    };\n    return CombineLatestOperator;\n}());\nexport { CombineLatestOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, resultSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.resultSelector = resultSelector;\n        _this.active = 0;\n        _this.values = [];\n        _this.observables = [];\n        return _this;\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(NONE);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === NONE ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.resultSelector) {\n                this._tryResultSelector(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {\n        var result;\n        try {\n            result = this.resultSelector.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\nexport { CombineLatestSubscriber };\n//# sourceMappingURL=combineLatest.js.map\n","/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\nimport { observable as Symbol_observable } from '../symbol/observable';\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input) {\n    return input && typeof input[Symbol_observable] === 'function';\n}\n//# sourceMappingURL=isInteropObservable.js.map\n","/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n/** Identifies an input as being an Iterable */\nexport function isIterable(input) {\n    return input && typeof input[Symbol_iterator] === 'function';\n}\n//# sourceMappingURL=isIterable.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\nexport function fromPromise(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToPromise(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            sub.add(scheduler.schedule(function () {\n                return input.then(function (value) {\n                    sub.add(scheduler.schedule(function () {\n                        subscriber.next(value);\n                        sub.add(scheduler.schedule(function () { return subscriber.complete(); }));\n                    }));\n                }, function (err) {\n                    sub.add(scheduler.schedule(function () { return subscriber.error(err); }));\n                });\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromPromise.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nexport function fromIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    if (!scheduler) {\n        return new Observable(subscribeToIterable(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var iterator;\n            sub.add(function () {\n                // Finalize generators\n                if (iterator && typeof iterator.return === 'function') {\n                    iterator.return();\n                }\n            });\n            sub.add(scheduler.schedule(function () {\n                iterator = input[Symbol_iterator]();\n                sub.add(scheduler.schedule(function () {\n                    if (subscriber.closed) {\n                        return;\n                    }\n                    var value;\n                    var done;\n                    try {\n                        var result = iterator.next();\n                        value = result.value;\n                        done = result.done;\n                    }\n                    catch (err) {\n                        subscriber.error(err);\n                        return;\n                    }\n                    if (done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(value);\n                        this.schedule();\n                    }\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromIterable.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nexport function fromObservable(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToObservable(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            sub.add(scheduler.schedule(function () {\n                var observable = input[Symbol_observable]();\n                sub.add(observable.subscribe({\n                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },\n                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },\n                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromObservable.js.map\n","/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=from.js.map\n","/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        // DEPRECATED PATH\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\nexport { MergeMapSubscriber };\n//# sourceMappingURL=mergeMap.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from '../operators/map';\n/* tslint:enable:max-line-length */\n/**\n * Joins last values emitted by passed Observables.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * <img src=\"./img/forkJoin.png\" width=\"100%\">\n *\n * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n * or directly as arguments. If no input Observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first Observable,\n * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n * not emit more than once and it will complete after that. If you need to emit combined values not only\n * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input Observables, whenever any of\n * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other Observables.\n * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other Observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * Observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output Observable is supposed to emit a result.\n *\n * @example <caption>Use forkJoin with operator emitting immediately</caption>\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin(\n *   of(1, 2, 3, 4),\n *   of(5, 6, 7, 8)\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!')\n * );\n *\n * // Logs:\n * // [4, 8]\n * // \"This is how it ends!\"\n *\n *\n * @example <caption>Use forkJoin with operator emitting after some time</caption>\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)) // emit 0, 1, 2, 3 every half a second and complete\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!')\n * );\n *\n * // Logs:\n * // [2, 3] after 3 seconds\n * // \"This is how it ends!\" immediately after\n *\n *\n * @example <caption>Use forkJoin with project function</caption>\n * import { jorkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)), // emit 0, 1, 2, 3 every half a second and complete\n *   (n, m) => n + m\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!')\n * );\n *\n * // Logs:\n * // 5 after 3 seconds\n * // \"This is how it ends!\" immediately after\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    var resultSelector;\n    if (typeof sources[sources.length - 1] === 'function') {\n        // DEPRECATED PATH\n        resultSelector = sources.pop();\n    }\n    // if the first and only other argument is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3])`\n    if (sources.length === 1 && isArray(sources[0])) {\n        sources = sources[0];\n    }\n    if (sources.length === 0) {\n        return EMPTY;\n    }\n    if (resultSelector) {\n        // DEPRECATED PATH\n        return forkJoin(sources).pipe(map(function (args) { return resultSelector.apply(void 0, args); }));\n    }\n    return new Observable(function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, sources);\n    });\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources) {\n        var _this = _super.call(this, destination) || this;\n        _this.sources = sources;\n        _this.completed = 0;\n        _this.haveValues = 0;\n        var len = sources.length;\n        _this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult(_this, source, null, i);\n            if (innerSubscription) {\n                _this.add(innerSubscription);\n            }\n        }\n        return _this;\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            destination.next(values);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=forkJoin.js.map\n","/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */\nimport { isArray } from './isArray';\nexport function isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n//# sourceMappingURL=isNumeric.js.map\n","/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return fromArray(observables, undefined).lift(new RaceOperator());\n}\nvar RaceOperator = /*@__PURE__*/ (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexport { RaceOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasFirst = false;\n        _this.observables = [];\n        _this.subscriptions = [];\n        return _this;\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber));\nexport { RaceSubscriber };\n//# sourceMappingURL=race.js.map\n","/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nvar ZipOperator = /*@__PURE__*/ (function () {\n    function ZipOperator(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    };\n    return ZipOperator;\n}());\nexport { ZipOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, resultSelector, values) {\n        if (values === void 0) {\n            values = Object.create(null);\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.iterators = [];\n        _this.active = 0;\n        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n        _this.values = values;\n        return _this;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryresultSelector = function (args) {\n        var result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber));\nexport { ZipSubscriber };\nvar StaticIterator = /*@__PURE__*/ (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = /*@__PURE__*/ (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        _this.observable = observable;\n        _this.stillUnsubscribed = true;\n        _this.buffer = [];\n        _this.isComplete = false;\n        return _this;\n    }\n    ZipBufferIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber));\n//# sourceMappingURL=zip.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nvar AuditOperator = /*@__PURE__*/ (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        return _this;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch(this.durationSelector)(value);\n            if (duration === errorObject) {\n                this.destination.error(errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult(this, duration);\n                if (!innerSubscription || innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=audit.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nvar BufferOperator = /*@__PURE__*/ (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.buffer = [];\n        _this.add(subscribeToResult(_this, closingNotifier));\n        return _this;\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=buffer.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) {\n        startBufferEvery = null;\n    }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nvar BufferCountOperator = /*@__PURE__*/ (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.buffer = [];\n        return _this;\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.startBufferEvery = startBufferEvery;\n        _this.buffers = [];\n        _this.count = 0;\n        return _this;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=bufferCount.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nvar BufferTimeOperator = /*@__PURE__*/ (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = /*@__PURE__*/ (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferTimeSpan = bufferTimeSpan;\n        _this.bufferCreationInterval = bufferCreationInterval;\n        _this.maxBufferSize = maxBufferSize;\n        _this.scheduler = scheduler;\n        _this.contexts = [];\n        var context = _this.openContext();\n        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (_this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: _this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n        return _this;\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context_1 = contexts[i];\n            var buffer = context_1.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context_1;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            destination.next(context_2.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nvar BufferToggleOperator = /*@__PURE__*/ (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(subscribeToResult(_this, openings));\n        return _this;\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_1 = contexts.shift();\n            context_1.subscription.unsubscribe();\n            context_1.buffer = null;\n            context_1.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            this.destination.next(context_2.buffer);\n            context_2.subscription.unsubscribe();\n            context_2.buffer = null;\n            context_2.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nvar BufferWhenOperator = /*@__PURE__*/ (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.closingSelector = closingSelector;\n        _this.subscribing = false;\n        _this.openBuffer();\n        return _this;\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            this.error(errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nvar CatchOperator = /*@__PURE__*/ (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        var _this = _super.call(this, destination) || this;\n        _this.selector = selector;\n        _this.caught = caught;\n        return _this;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=catchError.js.map\n","/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap(project, resultSelector) {\n    return mergeMap(project, resultSelector, 1);\n}\n//# sourceMappingURL=concatMap.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nvar CountOperator = /*@__PURE__*/ (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.count = 0;\n        _this.index = 0;\n        return _this;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=count.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nvar DebounceOperator = /*@__PURE__*/ (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        _this.durationSubscription = null;\n        return _this;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult(this, duration);\n        if (subscription && !subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively if the duration selector Observable\n            // emits synchronously\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=debounce.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nvar DebounceTimeOperator = /*@__PURE__*/ (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.dueTime = dueTime;\n        _this.scheduler = scheduler;\n        _this.debouncedSubscription = null;\n        _this.lastValue = null;\n        _this.hasValue = false;\n        return _this;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            var lastValue = this.lastValue;\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively when scheduled with things like\n            // VirtualScheduler/TestScheduler.\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) {\n        defaultValue = null;\n    }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nvar DefaultIfEmptyOperator = /*@__PURE__*/ (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        var _this = _super.call(this, destination) || this;\n        _this.defaultValue = defaultValue;\n        _this.isEmpty = true;\n        return _this;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay(delay, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    var absoluteDelay = isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nvar DelayOperator = /*@__PURE__*/ (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.delay = delay;\n        _this.scheduler = scheduler;\n        _this.queue = [];\n        _this.active = false;\n        _this.errored = false;\n        return _this;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber));\nvar DelayMessage = /*@__PURE__*/ (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nvar DelayWhenOperator = /*@__PURE__*/ (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.delayDurationSelector = delayDurationSelector;\n        _this.completed = false;\n        _this.delayNotifierSubscriptions = [];\n        _this.values = [];\n        return _this;\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subscriptionDelay = subscriptionDelay;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.source = source;\n        _this.sourceSubscribed = false;\n        return _this;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber));\n//# sourceMappingURL=delayWhen.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nvar DeMaterializeOperator = /*@__PURE__*/ (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=dematerialize.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nvar DistinctOperator = /*@__PURE__*/ (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.values = new Set();\n        if (flushes) {\n            _this.add(subscribeToResult(_this, flushes));\n        }\n        return _this;\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber));\nexport { DistinctSubscriber };\n//# sourceMappingURL=distinct.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nvar DistinctUntilChangedOperator = /*@__PURE__*/ (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.hasKey = false;\n        if (typeof compare === 'function') {\n            _this.compare = compare;\n        }\n        return _this;\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch(this.keySelector)(value);\n            if (key === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch(this.compare)(this.key, key);\n            if (result === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.count = 0;\n        return _this;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=filter.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TapSubscriber, _super);\n    function TapSubscriber(destination, observerOrNext, error, complete) {\n        var _this = _super.call(this, destination) || this;\n        _this._tapNext = noop;\n        _this._tapError = noop;\n        _this._tapComplete = noop;\n        _this._tapError = error || noop;\n        _this._tapComplete = complete || noop;\n        if (isFunction(observerOrNext)) {\n            _this._context = _this;\n            _this._tapNext = observerOrNext;\n        }\n        else if (observerOrNext) {\n            _this._context = observerOrNext;\n            _this._tapNext = observerOrNext.next || noop;\n            _this._tapError = observerOrNext.error || noop;\n            _this._tapComplete = observerOrNext.complete || noop;\n        }\n        return _this;\n    }\n    TapSubscriber.prototype._next = function (value) {\n        try {\n            this._tapNext.call(this._context, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(value);\n    };\n    TapSubscriber.prototype._error = function (err) {\n        try {\n            this._tapError.call(this._context, err);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.error(err);\n    };\n    TapSubscriber.prototype._complete = function () {\n        try {\n            this._tapComplete.call(this._context);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        return this.destination.complete();\n    };\n    return TapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=tap.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nvar EveryOperator = /*@__PURE__*/ (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.source = source;\n        _this.index = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber));\n//# sourceMappingURL=every.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nvar SwitchFirstOperator = /*@__PURE__*/ (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasCompleted = false;\n        _this.hasSubscription = false;\n        return _this;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap(project, resultSelector) {\n    if (resultSelector) {\n        // DEPRECATED PATH\n        return function (source) { return source.pipe(exhaustMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\n    }\n    return function (source) {\n        return source.lift(new ExhauseMapOperator(project));\n    };\n}\nvar ExhauseMapOperator = /*@__PURE__*/ (function () {\n    function ExhauseMapOperator(project) {\n        this.project = project;\n    }\n    ExhauseMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n    };\n    return ExhauseMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExhaustMapSubscriber, _super);\n    function ExhaustMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.hasSubscription = false;\n        _this.hasCompleted = false;\n        _this.index = 0;\n        return _this;\n    }\n    ExhaustMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    ExhaustMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    ExhaustMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    ExhaustMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return ExhaustMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (scheduler === void 0) {\n        scheduler = undefined;\n    }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nvar ExpandOperator = /*@__PURE__*/ (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexport { ExpandOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.scheduler = scheduler;\n        _this.index = 0;\n        _this.active = 0;\n        _this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            _this.buffer = [];\n        }\n        return _this;\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch(this.project)(value, index);\n            if (result === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber));\nexport { ExpandSubscriber };\n//# sourceMappingURL=expand.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nvar FinallyOperator = /*@__PURE__*/ (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        var _this = _super.call(this, destination) || this;\n        _this.add(new Subscription(callback));\n        return _this;\n    }\n    return FinallySubscriber;\n}(Subscriber));\n//# sourceMappingURL=finalize.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nvar FindValueOperator = /*@__PURE__*/ (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexport { FindValueOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.yieldIndex = yieldIndex;\n        _this.thisArg = thisArg;\n        _this.index = 0;\n        return _this;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber));\nexport { FindValueSubscriber };\n//# sourceMappingURL=find.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nvar IgnoreElementsOperator = /*@__PURE__*/ (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        // Do nothing\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ignoreElements.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nvar IsEmptyOperator = /*@__PURE__*/ (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=isEmpty.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nvar TakeLastOperator = /*@__PURE__*/ (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.ring = new Array();\n        _this.count = 0;\n        return _this;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeLast.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nvar MapToOperator = /*@__PURE__*/ (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        var _this = _super.call(this, destination) || this;\n        _this.value = value;\n        return _this;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=mapTo.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nvar MaterializeOperator = /*@__PURE__*/ (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=materialize.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nvar ScanOperator = /*@__PURE__*/ (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) {\n            hasSeed = false;\n        }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this._seed = _seed;\n        _this.hasSeed = hasSeed;\n        _this.index = 0;\n        return _this;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber));\n//# sourceMappingURL=scan.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nvar MergeScanOperator = /*@__PURE__*/ (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexport { MergeScanOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this.acc = acc;\n        _this.concurrent = concurrent;\n        _this.hasValue = false;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber));\nexport { MergeScanSubscriber };\n//# sourceMappingURL=mergeScan.js.map\n","/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nexport function onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\n/* tslint:enable:max-line-length */\nexport function onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nvar OnErrorResumeNextOperator = /*@__PURE__*/ (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.nextSources = nextSources;\n        return _this;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nvar PairwiseOperator = /*@__PURE__*/ (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasPrev = false;\n        return _this;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber));\n//# sourceMappingURL=pairwise.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { empty } from '../observable/empty';\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nvar RepeatOperator = /*@__PURE__*/ (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber));\n//# sourceMappingURL=repeat.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        _this.sourceIsBeingSubscribedTo = true;\n        return _this;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this._unsubscribe = _unsubscribe;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /*@__PURE__*/ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nvar RetryWhenOperator = /*@__PURE__*/ (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        return _this;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                retries = tryCatch(this.notifier)(errors);\n                if (retries === errorObject) {\n                    return _super.prototype.error.call(this, errorObject.e);\n                }\n                retriesSubscription = subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nvar SampleOperator = /*@__PURE__*/ (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.hasValue = false;\n        return _this;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=sample.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime(period, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nvar SampleTimeOperator = /*@__PURE__*/ (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.period = period;\n        _this.scheduler = scheduler;\n        _this.hasValue = false;\n        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));\n        return _this;\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nvar SequenceEqualOperator = /*@__PURE__*/ (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexport { SequenceEqualOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        var _this = _super.call(this, destination) || this;\n        _this.compareTo = compareTo;\n        _this.comparor = comparor;\n        _this._a = [];\n        _this._b = [];\n        _this._oneComplete = false;\n        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));\n        return _this;\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch(comparor)(a, b);\n                if (areEqual === errorObject) {\n                    this.destination.error(errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber));\nexport { SequenceEqualSubscriber };\nvar SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        return _this;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nvar SingleOperator = /*@__PURE__*/ (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.seenValue = false;\n        _this.index = 0;\n        return _this;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber));\n//# sourceMappingURL=single.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nvar SkipOperator = /*@__PURE__*/ (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skip.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nvar SkipLastOperator = /*@__PURE__*/ (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        var _this = _super.call(this, destination) || this;\n        _this._skipCount = _skipCount;\n        _this._count = 0;\n        _this._ring = new Array(_skipCount);\n        return _this;\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipLast.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nvar SkipUntilOperator = /*@__PURE__*/ (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (destination, source) {\n        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasValue = false;\n        _this.add(_this.innerSubscription = subscribeToResult(_this, notifier));\n        return _this;\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n        if (this.innerSubscription) {\n            this.innerSubscription.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        /* do nothing */\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nvar SkipWhileOperator = /*@__PURE__*/ (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.skipping = true;\n        _this.index = 0;\n        return _this;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipWhile.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) {\n            delayTime = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = asap;\n        }\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.delayTime = delayTime;\n        _this.scheduler = scheduler;\n        if (!isNumeric(delayTime) || delayTime < 0) {\n            _this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            _this.scheduler = asap;\n        }\n        return _this;\n    }\n    /** @nocollapse */\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = asap;\n        }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    /** @nocollapse */\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable));\nexport { SubscribeOnObservable };\n//# sourceMappingURL=SubscribeOnObservable.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(switchMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\n    }\n    return function (source) { return source.lift(new SwitchMapOperator(project)); };\n}\nvar SwitchMapOperator = /*@__PURE__*/ (function () {\n    function SwitchMapOperator(project) {\n        this.project = project;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nvar TakeUntilOperator = /*@__PURE__*/ (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nvar TakeWhileOperator = /*@__PURE__*/ (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.index = 0;\n        return _this;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeWhile.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport var defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle(durationSelector, config) {\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nvar ThrottleOperator = /*@__PURE__*/ (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.durationSelector = durationSelector;\n        _this._leading = _leading;\n        _this._trailing = _trailing;\n        _this._hasValue = false;\n        return _this;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.send = function () {\n        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    };\n    ThrottleSubscriber.prototype.throttle = function (value) {\n        var duration = this.tryDurationSelector(value);\n        if (duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype.throttlingDone = function () {\n        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this.throttlingDone();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=throttle.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nvar ThrottleTimeOperator = /*@__PURE__*/ (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.duration = duration;\n        _this.scheduler = scheduler;\n        _this.leading = leading;\n        _this.trailing = trailing;\n        _this._hasTrailingValue = false;\n        _this._trailingValue = null;\n        return _this;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype._complete = function () {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) {\n        var absoluteTimeout = isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nvar TimeoutWithOperator = /*@__PURE__*/ (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.absoluteTimeout = absoluteTimeout;\n        _this.waitFor = waitFor;\n        _this.withObservable = withObservable;\n        _this.scheduler = scheduler;\n        _this.action = null;\n        _this.scheduleTimeout();\n        return _this;\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.window = new Subject();\n        destination.next(_this.window);\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=window.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) {\n        startWindowEvery = 0;\n    }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nvar WindowCountOperator = /*@__PURE__*/ (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowSize = windowSize;\n        _this.startWindowEvery = startWindowEvery;\n        _this.windows = [new Subject()];\n        _this.count = 0;\n        destination.next(_this.windows[0]);\n        return _this;\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=windowCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n    var scheduler = async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nvar WindowTimeOperator = /*@__PURE__*/ (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountedSubject, _super);\n    function CountedSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._numberOfNextedValues = 0;\n        return _this;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowTimeSpan = windowTimeSpan;\n        _this.windowCreationInterval = windowCreationInterval;\n        _this.maxWindowSize = maxWindowSize;\n        _this.scheduler = scheduler;\n        _this.windows = [];\n        var window = _this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: _this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };\n            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n        return _this;\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nvar WindowToggleOperator = /*@__PURE__*/ (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));\n        return _this;\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_1 = contexts[index];\n                context_1.window.error(err);\n                context_1.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_2 = contexts[index];\n                context_2.window.complete();\n                context_2.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_3 = contexts[index];\n                context_3.window.unsubscribe();\n                context_3.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject) {\n                return this.error(errorObject.e);\n            }\n            else {\n                var window_1 = new Subject();\n                var subscription = new Subscription();\n                var context_4 = { window: window_1, subscription: subscription };\n                this.contexts.push(context_4);\n                var innerSubscription = subscribeToResult(this, closingNotifier, context_4);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context_4;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.closingSelector = closingSelector;\n        _this.openWindow();\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) {\n            innerSub = null;\n        }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            var err = errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /*@__PURE__*/ (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.observables = observables;\n        _this.project = project;\n        _this.toRespond = [];\n        var len = observables.length;\n        _this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            _this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            _this.add(subscribeToResult(_this, observable, observable, i));\n        }\n        return _this;\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map\n","import {ErrorResponse} from './interfaces'\nimport * as superagent from 'superagent'\nimport {Observable, Observer, from as fromPromise} from 'rxjs'\nimport {mergeMap} from 'rxjs/operators'\n\nexport function fetch(\n  input: string|Request,\n  init?: RequestInit,\n  abortCallback?: (req: Request) => void\n): Observable<any> {\n\n  if (!(input instanceof Request)) {\n    input = new Request(input, init)\n  }\n\n  let req = superagent[input.method.toLowerCase()](input.url)\n\n  for (let header of input.headers) {\n    req.set(header[0], header[1])\n  }\n\n  return fromPromise(input.text())\n  .pipe(\n    mergeMap(body => {\n      req.send(body)\n\n      return Observable.create((observer: Observer<any>) => {\n        req.end(function(err: any, res: any) {\n          if (err) {\n            return observer.error(res)\n          }\n\n          if (res.noContent === true) {\n            observer.next(new Response())\n            return observer.complete()\n          }\n\n          res.url = (input as Request).url\n          let response = new Response(res.text, res)\n\n          observer.next(response)\n          observer.complete()\n        })\n\n        return function abort() {\n          req.abort()\n          if (abortCallback) {\n            abortCallback(req)\n          }\n        }\n      })\n    })\n  )\n}\n","import {\n  RequestInterceptor,\n  ResponseInterceptor,\n  ErrorInterceptor\n} from './interfaces'\nimport { RxRestItem } from './index'\nimport { BodyParam } from './interfaces'\nimport { objectToMap } from './utils'\nimport { fetch } from './fetch';\n\nexport interface RequestBodyHandler<T> {\n  (body: BodyParam<T>): FormData|URLSearchParams|Body|Blob|undefined|string|Promise<any>\n}\n\nexport interface ResponseBodyHandler {\n  (body: Response): Promise<any>\n}\n\n/**\n * RxRestConfiguration\n */\nexport class RxRestConfiguration {\n  private $baseURL: string\n  private $headers: Headers = new Headers()\n  private $queryParams: URLSearchParams = new URLSearchParams()\n  public identifier: string = 'id'\n  public requestInterceptors: RequestInterceptor[] = []\n  public responseInterceptors: ResponseInterceptor[] = []\n  public errorInterceptors: ErrorInterceptor[] = []\n  public fetch: any\n  public abortCallback: (req: Request) => void = () => null\n  public uuid: boolean = false\n\n  constructor() {\n      this.fetch = fetch\n  }\n\n  /**\n   * requestBodyHandler\n   * JSONify the body if it's an `RxRestItem` or an `Object`\n   *\n   * @param {FormData|URLSearchParams|Body|Blob|undefined} body\n   * @returns {any}\n   */\n  _requestBodyHandler(body: FormData|URLSearchParams|Body|Blob|undefined):\n    FormData|URLSearchParams|Body|Blob|undefined|string|Promise<any> {\n    if (!body) {\n      return undefined\n    }\n\n    if (body instanceof FormData || body instanceof URLSearchParams) {\n      return body\n    }\n\n    return body instanceof RxRestItem ? body.json() : JSON.stringify(body)\n  }\n\n  /**\n   * responseBodyHandler\n   * transforms the response to a json object\n   *\n   * @param {Response} body\n   * @reject when response is an error\n   * @returns {Promise<any>}\n   */\n  _responseBodyHandler(body: Response): Promise<{body: any, metadata: any}> {\n    return body.text()\n    .then(text => {\n      return {body: text ? JSON.parse(text) : null, metadata: null}\n    })\n  }\n\n  get responseBodyHandler(): ResponseBodyHandler {\n    return this._responseBodyHandler\n  }\n\n  set responseBodyHandler(responseBodyHandler: ResponseBodyHandler) {\n    this._responseBodyHandler = responseBodyHandler\n  }\n\n  get requestBodyHandler(): RequestBodyHandler<any> {\n    return this._requestBodyHandler\n  }\n\n  set requestBodyHandler(requestBodyHandler: RequestBodyHandler<any>) {\n    this._requestBodyHandler = requestBodyHandler\n  }\n\n  /**\n   * set baseURL\n   *\n   * @param {String} base\n   * @returns\n   */\n  set baseURL(base: string) {\n    if (base.charAt(base.length - 1) !== '/') {\n      base += '/'\n    }\n\n    this.$baseURL = base\n  }\n\n  /**\n   * get baseURL\n   *\n   * @returns {string}\n   */\n  get baseURL(): string {\n    return this.$baseURL\n  }\n\n  /**\n   * Set global query params\n   * @param {Object|URLSearchParams} params\n   */\n  set queryParams(params: any) {\n    if (params instanceof URLSearchParams) {\n      this.$queryParams = params\n      return\n    }\n\n    if (typeof params === 'string') {\n      this.$queryParams = new URLSearchParams(params)\n      return\n    }\n\n    this.$queryParams = objectToMap(new URLSearchParams(), params)\n  }\n\n  /**\n   * Get global query params\n   * @return {URLSearchParams}\n   */\n  get queryParams(): any {\n    return this.$queryParams\n  }\n\n  /**\n   * set global headers\n   * @param {Object|Headers} params\n   */\n  set headers(params: any) {\n     if (params instanceof Headers) {\n      this.$headers = params\n      return\n    }\n\n    this.$headers = objectToMap(new Headers(), params)\n }\n\n  /**\n   * Get global headers\n   * @return Headers\n   */\n  get headers(): any {\n    return this.$headers\n  }\n}\n","import { RxRestConfiguration } from './RxRestConfiguration'\nimport {\n  RequestInterceptor,\n  ResponseInterceptor,\n  ErrorInterceptor,\n  ErrorResponse,\n  BodyParam\n} from './interfaces'\nimport { RxRestCollection, RxRestItem } from './index'\nimport { Observable, Observer, from as fromPromise, throwError as _throw, of } from 'rxjs'\nimport { mergeMap, catchError, concatMap } from 'rxjs/operators'\nimport { objectToMap, uuid } from './utils'\n\n// const fromPromise = function(promise: Promise<any>) {\n//   return Observable.create((observer: Observer<any>) => {\n//     promise\n//     .then((v) => {\n//       observer.next(v)\n//       observer.complete()\n//     })\n//     .catch(observer.error)\n//   })\n// }\n\nexport class RxRest<F, T> {\n  protected $route: string[]\n  $fromServer: boolean = false\n  $asIterable: boolean = true\n  $queryParams: URLSearchParams = new URLSearchParams()\n  $headers: Headers = new Headers()\n  config: RxRestConfiguration\n  $metadata: any\n  $pristine: boolean = true\n  $uuid?: string;\n\n  /**\n   * constructor\n   *\n   * @param {String} [route] the resource route\n   */\n  constructor(\n    config: RxRestConfiguration = new RxRestConfiguration(),\n    route?: string[],\n    metadata?: any\n  ) {\n    this.$route = route === undefined ? [] : [...route]\n    this.config = config\n    this.$metadata = metadata\n    if (config.uuid) {\n      this.$uuid = uuid()\n    }\n  }\n\n  protected addRoute(route: string): void {\n    this.$route.push.apply(this.$route, route.split('/'))\n  }\n\n  /**\n   * one\n   *\n   * @param {String} route\n   * @param {any} id\n   * @returns {RxRestItem}\n   */\n  one<T>(route: string, id?: any, ...suffix: string[]): RxRestItem<T> {\n    this.addRoute(route)\n    let o = {} as T\n    if (id) {\n      o[this.config.identifier] = id\n    }\n\n    return new RxRestItem<T>(this.$route, o, this.config, null, suffix)\n  }\n\n  /**\n   * all\n   *\n   * @param {String} route\n   * @param {boolean} [asIterable=true] - forces the next request to return an Observable<Array>\n   *                               instead of emitting multiple events\n   * @returns {RxRestCollection}\n   */\n  all<T>(route: string, asIterable: boolean = true): RxRestCollection<T> {\n    this.addRoute(route)\n    return new RxRestCollection<T>(this.$route, undefined, this.config, null, asIterable)\n  }\n\n  /**\n   * asIterable - sets the flag $asIterable\n   * instead of emitting multiple events\n   *\n   * @returns {self}\n   */\n  asIterable(value = true): this {\n    this.$asIterable = value\n    return this\n  }\n\n  /**\n   * fromObject\n   *\n   * @param {String} route\n   * @param {Object|Object[]} element\n   * @returns {RxRestItem|RxRestCollection}\n   */\n  fromObject<T>(route: string, element: T|T[], suffix: string[]):\n    RxRestItem<T>|RxRestCollection<T> {\n    this.addRoute(route)\n    if (Array.isArray(element)) {\n      return new RxRestCollection<T>(this.$route, element, this.config)\n    }\n\n    return new RxRestItem<T>(this.$route, element, this.config, null, suffix)\n  }\n\n  /**\n   * @access private\n   * @param {BodyParam} body\n   * @return {BodyParam|RxRestItem}\n   */\n  protected withBody(body: BodyParam<T>) {\n    return body ? body : this\n  }\n\n  /**\n   * post\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  post(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('POST', this.withBody(body))\n  }\n\n  /**\n   * remove\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  remove(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('DELETE')\n  }\n\n  /**\n   * get\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  get(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('GET')\n  }\n\n  /**\n   * put\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  put(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('PUT', this.withBody(body))\n  }\n\n  /**\n   * patch\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  patch(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('PATCH', this.withBody(body))\n  }\n\n  /**\n   * head\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  head(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('HEAD')\n  }\n\n  /**\n   * trace\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  trace(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('TRACE')\n  }\n\n  /**\n   * options\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  options(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('OPTIONS')\n  }\n\n  /**\n   * URL\n   *\n   * @returns {string}\n   */\n  get URL(): string {\n    return `${this.config.baseURL}${this.$route.join('/')}`\n  }\n\n  /**\n   * set local query params\n   * @param {Object|URLSearchParams} params\n   */\n  set queryParams(params: any) {\n    if (!params) {\n      return\n    }\n\n    if (params instanceof URLSearchParams) {\n      this.$queryParams = params\n      return\n    }\n\n    this.$queryParams = objectToMap(new URLSearchParams(), params)\n  }\n\n  /**\n   * Sets local query params useful to add params to a custom request\n   * @param {Object|URLSearchParams}\n   * @return this\n   */\n  setQueryParams(params: any): this {\n    this.queryParams = params\n    return this\n  }\n\n  /**\n   * Sets local headers useful to add headers to a custom request\n   * @param {Object|URLSearchParams}\n   * @return this\n   */\n  setHeaders(params: any): this {\n    this.headers = params\n    return this\n  }\n\n  /**\n   * Get local query params\n   * @return URLSearchParams\n   */\n  get queryParams(): any {\n    return this.$queryParams\n  }\n\n  /**\n   * Get request query params\n   * Combine local and global query params\n   * Local query params are overriding global params\n   * @return {String}\n   */\n  get requestQueryParams(): string {\n    let params = new URLSearchParams()\n\n    for (let param of this.config.queryParams) {\n      params.append(param[0], param[1])\n    }\n\n    for (let param of this.queryParams) {\n      params.append(param[0], param[1])\n    }\n\n    let str = params.toString()\n\n    if (str.length) {\n      return '?' + str\n    }\n\n    return ''\n  }\n\n  /**\n   * Set local headers\n   * @param {Object|Headers} params\n   */\n  set headers(params: any) {\n    if (!params) {\n      return\n    }\n\n     if (params instanceof Headers) {\n      this.$headers = params\n      return\n    }\n\n    this.$headers = objectToMap(new Headers(), params)\n }\n\n  /**\n   * Get local headers\n   * @return Headers\n   */\n  get headers(): any {\n    return this.$headers\n  }\n\n  /**\n   * get request Headers\n   * Combine local and global headers\n   * Local headers are overriding global headers\n   *\n   * @returns {Headers}\n   */\n  get requestHeaders(): Headers {\n    let headers = new Headers()\n\n    for (let header of this.headers) {\n      headers.append(header[0], header[1])\n    }\n\n    for (let header of this.config.headers) {\n      headers.append(header[0], header[1])\n    }\n\n    return headers\n  }\n\n  /**\n   * expandInterceptors\n   *\n   * @param {RequestInterceptor[]|ResponseInterceptor[]|ErrorInterceptor[]} interceptors\n   * @returns {Observable<any>} fn\n   */\n  private expandInterceptors(\n    interceptors: RequestInterceptor[]|ResponseInterceptor[]|ErrorInterceptor[]\n  ) {\n    return function(origin: any): Observable<any> {\n      return (<any>interceptors).reduce(\n        (obs: Observable<any>, interceptor: any) =>\n          obs.pipe(concatMap(value => {\n            let result = interceptor(value)\n            if (result === undefined) {\n              return of(value)\n            }\n\n            if (result instanceof Promise) {\n              return fromPromise(result)\n            }\n\n            if (result instanceof Observable) {\n              return result\n            }\n\n            return of(result)\n          })),\n        of(origin)\n      )\n    }\n  }\n\n  /**\n   * request\n   *\n   * @param {string} method\n   * @param {RxRestItem|FormData|URLSearchParams|Body|Blob|undefined|Object} [body]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  request(method: string, body?: BodyParam<T>): Observable<F> {\n    let requestOptions = {\n      method: method,\n      headers: <Headers> this.requestHeaders,\n      body: this.config.requestBodyHandler(body) as any\n    }\n\n    let request = new Request(this.URL + this.requestQueryParams, requestOptions)\n    let stream = <Observable<F>> of(request)\n    .pipe(\n      mergeMap(this.expandInterceptors(this.config.requestInterceptors)),\n      mergeMap(request => this.config.fetch(request, null, this.config.abortCallback)),\n      mergeMap(this.expandInterceptors(this.config.responseInterceptors)),\n      mergeMap(body => fromPromise(this.config.responseBodyHandler(body))),\n      mergeMap(({body, metadata}) => {\n        if (!Array.isArray(body)) {\n          let item: RxRestItem<T>\n          if (this instanceof RxRestItem) {\n            item = this\n            item.element = body as T\n            item.$metadata = metadata\n          } else {\n            item = new RxRestItem<T>(this.$route, body, this.config, metadata)\n          }\n\n          item.$fromServer = true\n          item.$pristine = true\n\n          return Observable.create((observer: Observer<RxRestItem<T>>) => {\n            observer.next(item)\n            observer.complete()\n          })\n        }\n\n        let collection = new RxRestCollection<T>(this.$route, body.map((e: T) => {\n          let item = new RxRestItem<T>(this.$route, e, this.config, metadata)\n          item.$fromServer = true\n          item.$pristine = true\n          return item\n        }), this.config, metadata)\n\n        collection.$pristine = true\n\n        return Observable.create((observer: Observer<RxRestItem<T>|RxRestCollection<T>>) => {\n          if (this.$asIterable) {\n            observer.next(collection)\n          } else {\n            for (let item of collection) {\n              observer.next(item)\n            }\n          }\n\n          observer.complete()\n        })\n      }),\n      catchError(body => {\n        return of(body).pipe(\n          mergeMap(this.expandInterceptors(this.config.errorInterceptors)),\n          mergeMap((body: ErrorResponse) => _throw(body))\n        )\n      })\n    )\n\n    return stream\n  }\n}\n","import { Observable } from 'rxjs'\nimport { RxRestProxyHandler } from './RxRestProxyHandler'\nimport { RxRest as AbstractRxRest } from './RxRest'\nimport { RxRestConfiguration } from './RxRestConfiguration';\n\nexport class RxRestItem<T> extends AbstractRxRest<RxRestItem<T> & T, T> {\n  $element: T = {} as T;\n\n  /**\n   * constructor\n   *\n   * @param {string[]} route\n   * @param {T} [element]\n   * @return {Proxy}\n   */\n  constructor(route: string[], element?: T, config?: RxRestConfiguration,\n              metadata?: any, suffix?: string[]) {\n    super(config, route, metadata)\n\n    if (element !== undefined) {\n      this.element = element\n    }\n\n    if (Array.isArray(suffix)) {\n      suffix = [].concat.apply([], suffix)\n      if (suffix.length) {\n        this.addRoute(suffix.join('/'))\n      }\n    }\n\n    const proxy = new Proxy(this.$element, new RxRestProxyHandler<RxRestItem<T>, T>(this))\n\n    return <RxRestItem<T> & T> proxy\n  }\n\n  /**\n   * save - POST or PUT according to $fromServer value\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  save(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<RxRestItem<T>|RxRestCollection<T>> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request(this.$fromServer === true ? 'PUT' : 'POST', this)\n  }\n\n  /**\n   * set element\n   *\n   * @param {T} element\n   */\n  set element(element: T) {\n    for (let i in element) {\n      if (i === this.config.identifier && !this.$element[this.config.identifier]) {\n        this.$route.push('' + element[i])\n      }\n\n      this.$element[i] = element[i]\n    }\n  }\n\n  /**\n   * get element\n   *\n   * @return {T}\n   */\n  get element(): T {\n    return this.$element\n  }\n\n  /**\n   * get plain object\n   *\n   * @return {T}\n   */\n  plain(): T {\n    return this.element\n  }\n\n  /**\n   * Get json string\n   * @return {string}\n   */\n  json(): string {\n    return JSON.stringify(this.plain())\n  }\n\n  /**\n   * Clone\n   * @return {RxRestItem<T>}\n   */\n  clone(): RxRestItem<T> & T {\n    let route = this.$route\n\n    if (this.$element[this.config.identifier]) {\n      route = route.slice(0, this.$route.length - 1)\n    }\n\n    let clone = new RxRestItem(route, this.$element, this.config)\n    clone.$fromServer = this.$fromServer\n    return clone as RxRestItem<T> & T\n  }\n}\n\nexport class RxRestCollection<T> extends AbstractRxRest<RxRestCollection<T> & T[] & T, T>\n  implements Iterable<RxRestItem<T>> {\n  length: number;\n  $elements: RxRestItem<T>[] = [];\n  [index: number]: RxRestItem<T>;\n\n  /**\n   * constructor\n   *\n   * @param {string[]} route\n   * @param {T[]|RxRestItem<T>[]]} [elements]\n   * @return {Proxy}\n   */\n  constructor(\n    route: string[],\n    elements?: T[]|RxRestItem<T>[],\n    config?: RxRestConfiguration,\n    metadata?: any,\n    asIterable: boolean = true\n  ) {\n    super(config, route, metadata)\n\n    if (elements !== undefined) {\n      this.elements = (elements as any).map((e: any) =>\n        e instanceof RxRestItem ? e.clone() : new RxRestItem(this.$route, e)\n      )\n    }\n\n    this.$asIterable = asIterable\n\n    const proxy = new Proxy(this.$elements, new RxRestProxyHandler<RxRestCollection<T>, T>(this))\n\n    return <RxRestCollection<T> & T[]> proxy\n  }\n\n  [Symbol.iterator]() {\n    let index = 0\n    let elements = this.$elements\n\n    return {\n      next(): IteratorResult<RxRestItem<T>> {\n        return index < elements.length ?\n          {value: elements[index++], done: false} : {value: undefined, done: true}\n      }\n    }\n  }\n\n  /**\n   * getList - fetch a collection\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  getList(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<RxRestItem<T>|RxRestCollection<T>> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('GET')\n  }\n\n  /**\n   * set elements\n   *\n   * @param {T[]} elements\n   */\n  set elements(elements: RxRestItem<T>[]) {\n    this.$elements = elements\n    this.length = elements.length\n  }\n\n  /**\n   * get elements\n   * @return {RxRestItem<T>[]}\n   */\n  get elements(): RxRestItem<T>[] {\n    return this.$elements\n  }\n\n  /**\n   * plain\n   *\n   * @returns {T[]}\n   */\n  plain(): T[] {\n    return this.elements.map(e => e.plain())\n  }\n\n  /**\n   * json\n   *\n   * @returns {String}\n   */\n  json(): string {\n    return JSON.stringify(this.plain())\n  }\n\n  /**\n   * clone\n   *\n   * @returns {RxRestCollection}\n   */\n  clone(): RxRestCollection<T> & T[] {\n    return new RxRestCollection<T>(\n      this.$route, this.$elements, this.config\n    ) as RxRestCollection<T> & T[]\n  }\n}\n\nexport class RxRest {\n  constructor(private config: RxRestConfiguration) {\n  }\n\n  one<T>(route: string, id?: any, ...suffix: string[]): RxRestItem<T> & T {\n    let r = new AbstractRxRest(this.config)\n    return r.one.call(r, route, id, suffix)\n  }\n\n  all<T>(route: string, asIterable: boolean = true): RxRestCollection<T> & T[] {\n    let r = new AbstractRxRest(this.config)\n    return r.all.call(r, route, asIterable)\n  }\n\n  fromObject<T>(route: string, element: T|T[], ...suffix: string[]):\n    (RxRestItem<T> & T) | (RxRestCollection<T> & T[]) {\n    let r = new AbstractRxRest(this.config)\n    return r.fromObject.call(r, route, element, suffix)\n  }\n}\n\nexport { RxRestConfiguration }\n"],"names":["target","$instance","$internal","this","concat","Object","getOwnPropertyNames","getOwnPropertySymbols","getPrototypeOf","p","attributes","indexOf","defineProperty","value","receiver","$pristine","map","item","key","Array","isArray","i","length","append","a","b","Math","random","toString","Emitter","obj","prototype","mixin","module","on","addEventListener","event","fn","_callbacks","push","once","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","cb","callbacks","splice","emit","args","slice","call","len","listeners","hasListeners","isObject","RequestBase","clearTimeout","_timer","_responseTimeoutTimer","parse","_parser","responseType","val","_responseType","serialize","_serializer","timeout","options","_timeout","_responseTimeout","option","deadline","response","console","warn","retry","count","_maxRetries","_retries","_retryCallback","ERROR_CODES","_shouldRetry","err","res","override","e","error","status","code","crossDomain","_retry","req","request","_aborted","timedout","_end","then","resolve","reject","_fullfilledPromise","self","_endCalled","Promise","innerResolve","innerReject","end","undefined","use","ok","Error","_okCallback","_isResponseOK","get","field","_header","toLowerCase","getHeader","set","header","unset","name","_data","_getFormData","abort","xhr","_auth","user","pass","base64Encoder","type","username","password","withCredentials","_withCredentials","redirects","n","_maxRedirects","maxResponseSize","TypeError","_maxResponseSize","toJSON","method","url","data","headers","send","isObj","_formData","_isHost","sortQuery","sort","_sort","_finalizeQueryString","query","_query","join","index","queryArr","substring","split","_appendQueryString","trace","_timeoutError","reason","errno","callback","_setTimeouts","setTimeout","str","shift","reduce","parts","changesOrigin","ResponseBase","Agent","_defaults","_setHeaderProperties","ct","utils","params","links","link","parseLinks","_setStatusProperties","statusCode","statusType","info","redirect","clientError","serverError","toError","created","accepted","noContent","badRequest","unauthorized","notAcceptable","forbidden","notFound","unprocessableEntity","forEach","_setDefaults","def","root","noop","window","exports","Request","getXHR","XMLHttpRequest","location","protocol","ActiveXObject","trim","s","replace","pairs","pushEncodedKeyValuePair","v","subkey","encodeURIComponent","parseString","pair","pos","decodeURIComponent","isJSON","mime","test","Response","text","responseText","statusText","line","lines","fields","parseHeader","getAllResponseHeaders","getResponseHeader","body","_parseBody","new_err","original","rawResponse","custom_err","del","serializeObject","types","html","json","xml","urlencoded","form","form-data","application/x-www-form-urlencoded","application/json","JSON","stringify","msg","accept","auth","btoa","string","attach","file","FormData","_callback","retries","crossDomainError","buffer","ca","agent","pipe","write","onreadystatechange","readyState","handleProgress","direction","total","percent","loaded","onprogress","bind","upload","open","contentType","hasOwnProperty","setRequestHeader","head","patch","post","put","extendStatics","setPrototypeOf","__proto__","d","__extends","__","constructor","create","isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","config","useDeprecatedSynchronousErrorHandling","stack","hostReportError","empty","closed","next","complete","tryCatchTarget","errorObject","tryCatcher","tryCatch","UnsubscriptionError","_super","errors","_this","tslib_1.__extends","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","remove","flattenUnsubscriptionErrors","sub","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","parent","errs","rxSubscriber","Symbol","for","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","emptyObserver","isTrustedSubscriber","trustedSubscriber","rxSubscriberSymbol","SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","toSubscriber","nextOrObserver","observable","pipeFromArray","fns","input","prev","Observable","subscribe","_isScalar","_subscribe","lift","operator","source","sink","_trySubscribe","promiseCtor","getPromiseCtor","Symbol_observable","operations","_i","toPromise","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","hasError","thrownError","AnonymousSubject","copy","asObservable","refCount","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","higherOrderRefCount","GroupBySubscriber","keySelector","elementSelector","durationSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","Map","element","group","groupedObservable","GroupedObservable","duration","GroupDurationSubscriber","clear","removeGroup","delete","groupSubject","refCountSubscription","InnerRefCountSubscription","BehaviorSubject","_value","getValue","enumerable","configurable","Action","scheduler","work","schedule","state","delay","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","QueueAction","Scheduler","SchedulerAction","now","Date","AsyncScheduler","delegate","active","scheduled","action","QueueScheduler","queue","emptyScheduled","isScheduler","subscribeToArray","array","fromArray","scalar","result","of","pop","throwError","dispatch","_a","Notification","kind","hasValue","observe","observer","do","toObservable","createNext","undefinedValueNotification","createError","createComplete","completeNotification","ObserveOnSubscriber","arg","notification","scheduleMessage","ObserveOnMessage","ReplaySubject","bufferSize","windowTime","Number","POSITIVE_INFINITY","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextInfiniteTimeWindow","nextTimeWindow","ReplayEvent","_getNow","_trimBufferThenGetEvents","eventsCount","spliceCount","time","max","AsyncSubject","hasNext","hasCompleted","nextHandle","tasksByHandle","runIfPresent","handle","Immediate","setImmediate","clearImmediate","AsapAction","AsapScheduler","asap","async","AnimationFrameAction","requestAnimationFrame","cancelAnimationFrame","AnimationFrameScheduler","animationFrame","VirtualTimeScheduler","maxFrames","VirtualAction","frame","frameTimeFactor","sortActions","ArgumentOutOfRangeError","EmptyError","TimeoutError","project","thisArg","MapOperator","MapSubscriber","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","InnerSubscriber","subscribeToPromise","promise","getSymbolIterator","iterator","subscribeToIterable","iterable","Symbol_iterator","done","return","subscribeToObservable","obs","isArrayLike","isPromise","subscribeTo","subscribeToResult","outerSubscriber","NONE","CombineLatestSubscriber","resultSelector","values","observables","toRespond","unused","oldVal","_tryResultSelector","isInteropObservable","isIterable","fromPromise","fromIterable","fromObservable","from","mergeMap","concurrent","ii","MergeMapOperator","MergeMapSubscriber","_tryNext","_innerSub","ish","ForkJoinSubscriber","sources","completed","haveValues","innerSubscription","_hasValue","isNumeric","parseFloat","RaceSubscriber","hasFirst","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","_tryresultSelector","nextResult","isComplete","AuditSubscriber","throttled","clearThrottle","BufferSubscriber","closingNotifier","BufferCountSubscriber","BufferSkipCountSubscriber","startBufferEvery","buffers","Context","BufferTimeSubscriber","bufferTimeSpan","bufferCreationInterval","maxBufferSize","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","context_1","onBufferFull","context_2","closeContext","prevContext","BufferToggleSubscriber","openings","closingSelector","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","subscribing","closingSubscription","catchError","selector","CatchOperator","caught","CatchSubscriber","err2","concatMap","CountSubscriber","predicate","_tryPredicate","DebounceSubscriber","durationSubscription","emitValue","DebounceTimeSubscriber","dueTime","debouncedSubscription","lastValue","clearDebounce","dispatchNext","debouncedNext","DefaultIfEmptySubscriber","defaultValue","isEmpty","DelaySubscriber","delay_1","_schedule","scheduleNotification","message","DelayMessage","DelayWhenSubscriber","delayDurationSelector","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","DistinctSubscriber","flushes","Set","_useKeySelector","_finalizeNext","has","DistinctUntilChangedSubscriber","compare","hasKey","y","Boolean","FilterSubscriber","TapSubscriber","_tapNext","_tapError","_tapComplete","TakeSubscriber","EverySubscriber","everyValueMatch","SwitchFirstSubscriber","hasSubscription","ExhaustMapSubscriber","tryNext","ExpandSubscriber","subscribeToProjection","FinallySubscriber","FindValueSubscriber","yieldIndex","IgnoreElementsSubscriber","IsEmptySubscriber","TakeLastSubscriber","ring","idx","MapToSubscriber","MaterializeSubscriber","ScanSubscriber","accumulator","_seed","hasSeed","seed","MergeScanSubscriber","acc","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","PairwiseSubscriber","hasPrev","RepeatSubscriber","RepeatWhenSubscriber","notifier","sourceIsBeingSubscribedTo","subscribeToRetries","retriesSubscription","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","SampleTimeSubscriber","period","dispatchNotification","SequenceEqualSubscriber","compareTo","comparor","_b","_oneComplete","SequenceEqualCompareToSubscriber","checkValues","areEqual","nextB","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipSubscriber","SkipLastSubscriber","_skipCount","_count","_ring","skipCount","currentIndex","oldValue","SkipUntilSubscriber","SkipWhileSubscriber","skipping","tryCallPredicate","SubscribeOnObservable","delayTime","SwitchMapSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","ThrottleSubscriber","_leading","_trailing","_sendValue","_throttled","throttle","tryDurationSelector","throttlingDone","ThrottleTimeSubscriber","leading","trailing","_hasTrailingValue","_trailingValue","TimeoutWithSubscriber","absoluteTimeout","waitFor","withObservable","scheduleTimeout","dispatchTimeout","WindowSubscriber","openWindow","prevWindow","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","windows","c","window_1","CountedSubject","_numberOfNextedValues","WindowTimeSubscriber","windowTimeSpan","windowCreationInterval","maxWindowSize","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","WindowToggleSubscriber","openSubscription","context_3","context_4","inner","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","_tryProject","init","abortCallback","superagent","Headers","URLSearchParams","fetch","RxRestItem","metadata","_responseBodyHandler","responseBodyHandler","_requestBodyHandler","requestBodyHandler","base","charAt","$baseURL","$queryParams","objectToMap","$headers","RxRestConfiguration","route","$route","$metadata","uuid","$uuid","addRoute","o","identifier","suffix","asIterable","RxRestCollection","$asIterable","queryParams","withBody","interceptors","origin","interceptor","requestOptions","requestHeaders","URL","requestQueryParams","expandInterceptors","requestInterceptors","responseInterceptors","$fromServer","collection","errorInterceptors","_throw","baseURL","param","proxy","Proxy","$element","RxRestProxyHandler","AbstractRxRest","plain","clone","elements","_this2","$elements","r","one","all","fromObject"],"mappings":"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"}