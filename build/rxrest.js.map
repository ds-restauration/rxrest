{"version":3,"file":"rxrest.js","sources":["../src/RxRestProxyHandler.ts","../src/utils.ts","../src/fetch.ts","../src/RxRestConfiguration.ts","../src/RxRest.ts","../src/index.ts"],"sourcesContent":["import {RxRest} from './RxRest'\n\nexport class RxRestProxyHandler<F, T> implements ProxyHandler<RxRest<F, T>> {\n  private $internal: PropertyKey[] = [];\n  private $instance: F;\n\n  constructor(target: F) {\n    this.$instance = target\n    do {\n      this.$internal = this.$internal.concat(\n        Object.getOwnPropertyNames(target), Object.getOwnPropertySymbols(target)\n      )\n    } while (target = Object.getPrototypeOf(target))\n  }\n\n  getPrototypeOf(target: any) {\n    return Object.getPrototypeOf(this.$instance)\n  }\n\n  defineProperty(target: any, p: PropertyKey, attributes: PropertyDescriptor): boolean {\n    if (~this.$internal.indexOf(p)) {\n      return true\n    }\n\n    Object.defineProperty(target, p, attributes)\n    return true\n  }\n\n  deleteProperty(target: any, p: PropertyKey): boolean {\n    return delete target[p]\n  }\n\n  set(target: any, p: PropertyKey, value: any, receiver: any): boolean {\n\n    if (~this.$internal.indexOf(p)) {\n      this.$instance[p] = value\n      return true\n    }\n\n    if ((this.$instance as any).$pristine === true && target[p] !== value) {\n      (this.$instance as any).$pristine = false\n    }\n\n    target[p] = value\n    return true\n  }\n\n  get(target: any, p: PropertyKey, receiver: any): any {\n    if (~this.$internal.indexOf(p)) {\n      return this.$instance[p]\n    }\n\n    return target[p]\n  }\n}\n","export function objectToMap(map: URLSearchParams | Headers, item: any): any {\n  for (let key in item) {\n    if (Array.isArray(item[key])) {\n      for (let i = 0; i < item[key].length; i++) {\n        map.append(key, item[key][i])\n      }\n    } else {\n      map.append(key, item[key])\n    }\n  }\n\n  return map\n}\n\n/**\n * UUID generator https://gist.github.com/jed/982883\n */\nexport function uuid(a: any = '', b: any = '') {\n  for (; a++ < 36; b += a * 51 & 52 ? (\n    a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4\n  ).toString(16) : '-') {\n    //\n  }\n  return b\n}\n","import './rxjs'\nimport {ErrorResponse} from './interfaces'\nimport * as superagent from 'superagent'\nimport {Observable} from 'rxjs/Observable'\nimport {Observer} from 'rxjs/Observer'\n\nexport function fetch(\n  input: string|Request,\n  init?: RequestInit,\n  abortCallback?: (req: Request) => void\n): Observable<any> {\n\n  if (!(input instanceof Request)) {\n    input = new Request(input, init)\n  }\n\n  let req = superagent[input.method.toLowerCase()](input.url)\n\n  for (let header of input.headers) {\n    req.set(header[0], header[1])\n  }\n\n  return Observable.fromPromise(input.text())\n  .mergeMap(body => {\n    req.send(body)\n\n    return Observable.create((observer: Observer<any>) => {\n      req.end(function(err: any, res: any) {\n        if (err) {\n          return observer.error(res)\n        }\n\n        if (res.noContent === true) {\n          observer.next(new Response())\n          return observer.complete()\n        }\n\n        res.url = (input as Request).url\n        let response = new Response(res.text, res)\n\n        observer.next(response)\n        observer.complete()\n      })\n\n      return function abort() {\n        req.abort()\n        if (abortCallback) {\n          abortCallback(req)\n        }\n      }\n    })\n  })\n}\n","import {\n  RequestInterceptor,\n  ResponseInterceptor,\n  ErrorInterceptor\n} from './interfaces'\nimport { RxRestItem } from './index'\nimport { BodyParam } from './interfaces'\nimport { objectToMap } from './utils'\nimport { fetch } from './fetch';\n\nexport interface RequestBodyHandler<T> {\n  (body: BodyParam<T>): FormData|URLSearchParams|Body|Blob|undefined|string|Promise<any>\n}\n\nexport interface ResponseBodyHandler {\n  (body: Response): Promise<any>\n}\n\n/**\n * RxRestConfiguration\n */\nexport class RxRestConfiguration {\n  private $baseURL: string\n  private $headers: Headers = new Headers()\n  private $queryParams: URLSearchParams = new URLSearchParams()\n  public identifier: string = 'id'\n  public requestInterceptors: RequestInterceptor[] = []\n  public responseInterceptors: ResponseInterceptor[] = []\n  public errorInterceptors: ErrorInterceptor[] = []\n  public fetch: any\n  public abortCallback: (req: Request) => void = () => null\n  public uuid: boolean = false\n\n  constructor() {\n      this.fetch = fetch\n  }\n\n  /**\n   * requestBodyHandler\n   * JSONify the body if it's an `RxRestItem` or an `Object`\n   *\n   * @param {FormData|URLSearchParams|Body|Blob|undefined} body\n   * @returns {any}\n   */\n  _requestBodyHandler(body: FormData|URLSearchParams|Body|Blob|undefined):\n    FormData|URLSearchParams|Body|Blob|undefined|string|Promise<any> {\n    if (!body) {\n      return undefined\n    }\n\n    if (body instanceof FormData || body instanceof URLSearchParams) {\n      return body\n    }\n\n    return body instanceof RxRestItem ? body.json() : JSON.stringify(body)\n  }\n\n  /**\n   * responseBodyHandler\n   * transforms the response to a json object\n   *\n   * @param {Response} body\n   * @reject when response is an error\n   * @returns {Promise<any>}\n   */\n  _responseBodyHandler(body: Response): Promise<{body: any, metadata: any}> {\n    return body.text()\n    .then(text => {\n      return {body: text ? JSON.parse(text) : null, metadata: null}\n    })\n  }\n\n  get responseBodyHandler(): ResponseBodyHandler {\n    return this._responseBodyHandler\n  }\n\n  set responseBodyHandler(responseBodyHandler: ResponseBodyHandler) {\n    this._responseBodyHandler = responseBodyHandler\n  }\n\n  get requestBodyHandler(): RequestBodyHandler<any> {\n    return this._requestBodyHandler\n  }\n\n  set requestBodyHandler(requestBodyHandler: RequestBodyHandler<any>) {\n    this._requestBodyHandler = requestBodyHandler\n  }\n\n  /**\n   * set baseURL\n   *\n   * @param {String} base\n   * @returns\n   */\n  set baseURL(base: string) {\n    if (base.charAt(base.length - 1) !== '/') {\n      base += '/'\n    }\n\n    this.$baseURL = base\n  }\n\n  /**\n   * get baseURL\n   *\n   * @returns {string}\n   */\n  get baseURL(): string {\n    return this.$baseURL\n  }\n\n  /**\n   * Set global query params\n   * @param {Object|URLSearchParams} params\n   */\n  set queryParams(params: any) {\n    if (params instanceof URLSearchParams) {\n      this.$queryParams = params\n      return\n    }\n\n    if (typeof params === 'string') {\n      this.$queryParams = new URLSearchParams(params)\n      return\n    }\n\n    this.$queryParams = objectToMap(new URLSearchParams(), params)\n  }\n\n  /**\n   * Get global query params\n   * @return {URLSearchParams}\n   */\n  get queryParams(): any {\n    return this.$queryParams\n  }\n\n  /**\n   * set global headers\n   * @param {Object|Headers} params\n   */\n  set headers(params: any) {\n     if (params instanceof Headers) {\n      this.$headers = params\n      return\n    }\n\n    this.$headers = objectToMap(new Headers(), params)\n }\n\n  /**\n   * Get global headers\n   * @return Headers\n   */\n  get headers(): any {\n    return this.$headers\n  }\n}\n","import './rxjs'\nimport { RxRestConfiguration } from './RxRestConfiguration'\nimport {\n  RequestInterceptor,\n  ResponseInterceptor,\n  ErrorInterceptor,\n  ErrorResponse,\n  BodyParam\n} from './interfaces'\nimport { RxRestCollection, RxRestItem } from './index'\nimport { Observable } from 'rxjs/Observable'\nimport { Observer } from 'rxjs/Observer'\nimport { mergeMap, catchError } from 'rxjs/operators'\nimport { fromPromise } from 'rxjs/observable/fromPromise'\nimport { _throw } from 'rxjs/observable/throw'\nimport { of } from 'rxjs/observable/of'\n\nimport { objectToMap, uuid } from './utils'\n\n// const fromPromise = function(promise: Promise<any>) {\n//   return Observable.create((observer: Observer<any>) => {\n//     promise\n//     .then((v) => {\n//       observer.next(v)\n//       observer.complete()\n//     })\n//     .catch(observer.error)\n//   })\n// }\n\nexport class RxRest<F, T> {\n  protected $route: string[]\n  $fromServer: boolean = false\n  $asIterable: boolean = true\n  $queryParams: URLSearchParams = new URLSearchParams()\n  $headers: Headers = new Headers()\n  config: RxRestConfiguration\n  $metadata: any\n  $pristine: boolean = true\n  $uuid?: string;\n\n  /**\n   * constructor\n   *\n   * @param {String} [route] the resource route\n   */\n  constructor(\n    config: RxRestConfiguration = new RxRestConfiguration(),\n    route?: string[],\n    metadata?: any\n  ) {\n    this.$route = route === undefined ? [] : [...route]\n    this.config = config\n    this.$metadata = metadata\n    if (config.uuid) {\n      this.$uuid = uuid()\n    }\n  }\n\n  protected addRoute(route: string): void {\n    this.$route.push.apply(this.$route, route.split('/'))\n  }\n\n  /**\n   * one\n   *\n   * @param {String} route\n   * @param {any} id\n   * @returns {RxRestItem}\n   */\n  one<T>(route: string, id?: any, ...suffix: string[]): RxRestItem<T> {\n    this.addRoute(route)\n    let o = {} as T\n    if (id) {\n      o[this.config.identifier] = id\n    }\n\n    return new RxRestItem<T>(this.$route, o, this.config, null, suffix)\n  }\n\n  /**\n   * all\n   *\n   * @param {String} route\n   * @param {boolean} [asIterable=true] - forces the next request to return an Observable<Array>\n   *                               instead of emitting multiple events\n   * @returns {RxRestCollection}\n   */\n  all<T>(route: string, asIterable: boolean = true): RxRestCollection<T> {\n    this.addRoute(route)\n    return new RxRestCollection<T>(this.$route, undefined, this.config, null, asIterable)\n  }\n\n  /**\n   * asIterable - sets the flag $asIterable\n   * instead of emitting multiple events\n   *\n   * @returns {self}\n   */\n  asIterable(value = true): this {\n    this.$asIterable = value\n    return this\n  }\n\n  /**\n   * fromObject\n   *\n   * @param {String} route\n   * @param {Object|Object[]} element\n   * @returns {RxRestItem|RxRestCollection}\n   */\n  fromObject<T>(route: string, element: T|T[], suffix: string[]):\n    RxRestItem<T>|RxRestCollection<T> {\n    this.addRoute(route)\n    if (Array.isArray(element)) {\n      return new RxRestCollection<T>(this.$route, element, this.config)\n    }\n\n    return new RxRestItem<T>(this.$route, element, this.config, null, suffix)\n  }\n\n  /**\n   * @access private\n   * @param {BodyParam} body\n   * @return {BodyParam|RxRestItem}\n   */\n  protected withBody(body: BodyParam<T>) {\n    return body ? body : this\n  }\n\n  /**\n   * post\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  post(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('POST', this.withBody(body))\n  }\n\n  /**\n   * remove\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  remove(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('DELETE')\n  }\n\n  /**\n   * get\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  get(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('GET')\n  }\n\n  /**\n   * put\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  put(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('PUT', this.withBody(body))\n  }\n\n  /**\n   * patch\n   *\n   * @param {Body|Blob|FormData|URLSearchParams|Object|RxRestItem} [body]\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  patch(body?: BodyParam<T>, queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('PATCH', this.withBody(body))\n  }\n\n  /**\n   * head\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  head(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('HEAD')\n  }\n\n  /**\n   * trace\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  trace(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('TRACE')\n  }\n\n  /**\n   * options\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  options(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<F> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('OPTIONS')\n  }\n\n  /**\n   * URL\n   *\n   * @returns {string}\n   */\n  get URL(): string {\n    return `${this.config.baseURL}${this.$route.join('/')}`\n  }\n\n  /**\n   * set local query params\n   * @param {Object|URLSearchParams} params\n   */\n  set queryParams(params: any) {\n    if (!params) {\n      return\n    }\n\n    if (params instanceof URLSearchParams) {\n      this.$queryParams = params\n      return\n    }\n\n    this.$queryParams = objectToMap(new URLSearchParams(), params)\n  }\n\n  /**\n   * Sets local query params useful to add params to a custom request\n   * @param {Object|URLSearchParams}\n   * @return this\n   */\n  setQueryParams(params: any): this {\n    this.queryParams = params\n    return this\n  }\n\n  /**\n   * Sets local headers useful to add headers to a custom request\n   * @param {Object|URLSearchParams}\n   * @return this\n   */\n  setHeaders(params: any): this {\n    this.headers = params\n    return this\n  }\n\n  /**\n   * Get local query params\n   * @return URLSearchParams\n   */\n  get queryParams(): any {\n    return this.$queryParams\n  }\n\n  /**\n   * Get request query params\n   * Combine local and global query params\n   * Local query params are overriding global params\n   * @return {String}\n   */\n  get requestQueryParams(): string {\n    let params = new URLSearchParams()\n\n    for (let param of this.config.queryParams) {\n      params.append(param[0], param[1])\n    }\n\n    for (let param of this.queryParams) {\n      params.append(param[0], param[1])\n    }\n\n    let str = params.toString()\n\n    if (str.length) {\n      return '?' + str\n    }\n\n    return ''\n  }\n\n  /**\n   * Set local headers\n   * @param {Object|Headers} params\n   */\n  set headers(params: any) {\n    if (!params) {\n      return\n    }\n\n     if (params instanceof Headers) {\n      this.$headers = params\n      return\n    }\n\n    this.$headers = objectToMap(new Headers(), params)\n }\n\n  /**\n   * Get local headers\n   * @return Headers\n   */\n  get headers(): any {\n    return this.$headers\n  }\n\n  /**\n   * get request Headers\n   * Combine local and global headers\n   * Local headers are overriding global headers\n   *\n   * @returns {Headers}\n   */\n  get requestHeaders(): Headers {\n    let headers = new Headers()\n\n    for (let header of this.headers) {\n      headers.append(header[0], header[1])\n    }\n\n    for (let header of this.config.headers) {\n      headers.append(header[0], header[1])\n    }\n\n    return headers\n  }\n\n  /**\n   * expandInterceptors\n   *\n   * @param {RequestInterceptor[]|ResponseInterceptor[]|ErrorInterceptor[]} interceptors\n   * @returns {Observable<any>} fn\n   */\n  private expandInterceptors(\n    interceptors: RequestInterceptor[]|ResponseInterceptor[]|ErrorInterceptor[]\n  ) {\n    return function(origin: any): Observable<any> {\n      return (<any>interceptors).reduce(\n        (obs: Observable<any>, interceptor: any) =>\n          obs.concatMap(value => {\n            let result = interceptor(value)\n            if (result === undefined) {\n              return of(value)\n            }\n\n            if (result instanceof Promise) {\n              return fromPromise(result)\n            }\n\n            if (result instanceof Observable) {\n              return result\n            }\n\n            return of(result)\n          }),\n        of(origin)\n      )\n    }\n  }\n\n  /**\n   * request\n   *\n   * @param {string} method\n   * @param {RxRestItem|FormData|URLSearchParams|Body|Blob|undefined|Object} [body]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  request(method: string, body?: BodyParam<T>): Observable<F> {\n    let requestOptions = {\n      method: method,\n      headers: <Headers> this.requestHeaders,\n      body: this.config.requestBodyHandler(body) as any\n    }\n\n    let request = new Request(this.URL + this.requestQueryParams, requestOptions)\n    let stream = <Observable<F>> Observable.of(request)\n    .pipe(\n      mergeMap(this.expandInterceptors(this.config.requestInterceptors)),\n      mergeMap(request => this.config.fetch(request, null, this.config.abortCallback)),\n      mergeMap(this.expandInterceptors(this.config.responseInterceptors)),\n      mergeMap(body => fromPromise(this.config.responseBodyHandler(body))),\n      mergeMap(({body, metadata}) => {\n        if (!Array.isArray(body)) {\n          let item: RxRestItem<T>\n          if (this instanceof RxRestItem) {\n            item = this\n            item.element = body as T\n            item.$metadata = metadata\n          } else {\n            item = new RxRestItem<T>(this.$route, body, this.config, metadata)\n          }\n\n          item.$fromServer = true\n          item.$pristine = true\n\n          return Observable.create((observer: Observer<RxRestItem<T>>) => {\n            observer.next(item)\n            observer.complete()\n          })\n        }\n\n        let collection = new RxRestCollection<T>(this.$route, body.map((e: T) => {\n          let item = new RxRestItem<T>(this.$route, e, this.config, metadata)\n          item.$fromServer = true\n          item.$pristine = true\n          return item\n        }), this.config, metadata)\n\n        collection.$pristine = true\n\n        return Observable.create((observer: Observer<RxRestItem<T>|RxRestCollection<T>>) => {\n          if (this.$asIterable) {\n            observer.next(collection)\n          } else {\n            for (let item of collection) {\n              observer.next(item)\n            }\n          }\n\n          observer.complete()\n        })\n      }),\n      catchError(body => {\n        return of(body).pipe(\n          mergeMap(this.expandInterceptors(this.config.errorInterceptors)),\n          mergeMap((body: ErrorResponse) => _throw(body))\n        )\n      })\n    )\n\n    return stream\n  }\n}\n","import { Observable } from 'rxjs/Observable'\nimport { RxRestProxyHandler } from './RxRestProxyHandler'\nimport { RxRest as AbstractRxRest } from './RxRest'\nimport { RxRestConfiguration } from './RxRestConfiguration';\n\nexport class RxRestItem<T> extends AbstractRxRest<RxRestItem<T> & T, T> {\n  $element: T = {} as T;\n\n  /**\n   * constructor\n   *\n   * @param {string[]} route\n   * @param {T} [element]\n   * @return {Proxy}\n   */\n  constructor(route: string[], element?: T, config?: RxRestConfiguration,\n              metadata?: any, suffix?: string[]) {\n    super(config, route, metadata)\n\n    if (element !== undefined) {\n      this.element = element\n    }\n\n    if (Array.isArray(suffix)) {\n      suffix = [].concat.apply([], suffix)\n      if (suffix.length) {\n        this.addRoute(suffix.join('/'))\n      }\n    }\n\n    const proxy = new Proxy(this.$element, new RxRestProxyHandler<RxRestItem<T>, T>(this))\n\n    return <RxRestItem<T> & T> proxy\n  }\n\n  /**\n   * save - POST or PUT according to $fromServer value\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  save(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<RxRestItem<T>|RxRestCollection<T>> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request(this.$fromServer === true ? 'PUT' : 'POST', this)\n  }\n\n  /**\n   * set element\n   *\n   * @param {T} element\n   */\n  set element(element: T) {\n    for (let i in element) {\n      if (i === this.config.identifier && !this.$element[this.config.identifier]) {\n        this.$route.push('' + element[i])\n      }\n\n      this.$element[i] = element[i]\n    }\n  }\n\n  /**\n   * get element\n   *\n   * @return {T}\n   */\n  get element(): T {\n    return this.$element\n  }\n\n  /**\n   * get plain object\n   *\n   * @return {T}\n   */\n  plain(): T {\n    return this.element\n  }\n\n  /**\n   * Get json string\n   * @return {string}\n   */\n  json(): string {\n    return JSON.stringify(this.plain())\n  }\n\n  /**\n   * Clone\n   * @return {RxRestItem<T>}\n   */\n  clone(): RxRestItem<T> & T {\n    let route = this.$route\n\n    if (this.$element[this.config.identifier]) {\n      route = route.slice(0, this.$route.length - 1)\n    }\n\n    let clone = new RxRestItem(route, this.$element, this.config)\n    clone.$fromServer = this.$fromServer\n    return clone as RxRestItem<T> & T\n  }\n}\n\nexport class RxRestCollection<T> extends AbstractRxRest<RxRestCollection<T> & T[] & T, T>\n  implements Iterable<RxRestItem<T>> {\n  length: number;\n  $elements: RxRestItem<T>[] = [];\n  [index: number]: RxRestItem<T>;\n\n  /**\n   * constructor\n   *\n   * @param {string[]} route\n   * @param {T[]|RxRestItem<T>[]]} [elements]\n   * @return {Proxy}\n   */\n  constructor(\n    route: string[],\n    elements?: T[]|RxRestItem<T>[],\n    config?: RxRestConfiguration,\n    metadata?: any,\n    asIterable: boolean = true\n  ) {\n    super(config, route, metadata)\n\n    if (elements !== undefined) {\n      this.elements = (elements as any).map((e: any) =>\n        e instanceof RxRestItem ? e.clone() : new RxRestItem(this.$route, e)\n      )\n    }\n\n    this.$asIterable = asIterable\n\n    const proxy = new Proxy(this.$elements, new RxRestProxyHandler<RxRestCollection<T>, T>(this))\n\n    return <RxRestCollection<T> & T[]> proxy\n  }\n\n  [Symbol.iterator]() {\n    let index = 0\n    let elements = this.$elements\n\n    return {\n      next(): IteratorResult<RxRestItem<T>> {\n        return index < elements.length ?\n          {value: elements[index++], done: false} : {value: undefined, done: true}\n      }\n    }\n  }\n\n  /**\n   * getList - fetch a collection\n   *\n   * @param {Object|URLSearchParams} [queryParams]\n   * @param {Object|Headers} [headers]\n   * @returns {Observable<RxRestItem|RxRestCollection>}\n   */\n  getList(queryParams?: Object|URLSearchParams, headers?: Object|Headers):\n    Observable<RxRestItem<T>|RxRestCollection<T>> {\n    this.queryParams = queryParams\n    this.headers = headers\n\n    return this.request('GET')\n  }\n\n  /**\n   * set elements\n   *\n   * @param {T[]} elements\n   */\n  set elements(elements: RxRestItem<T>[]) {\n    this.$elements = elements\n    this.length = elements.length\n  }\n\n  /**\n   * get elements\n   * @return {RxRestItem<T>[]}\n   */\n  get elements(): RxRestItem<T>[] {\n    return this.$elements\n  }\n\n  /**\n   * plain\n   *\n   * @returns {T[]}\n   */\n  plain(): T[] {\n    return this.elements.map(e => e.plain())\n  }\n\n  /**\n   * json\n   *\n   * @returns {String}\n   */\n  json(): string {\n    return JSON.stringify(this.plain())\n  }\n\n  /**\n   * clone\n   *\n   * @returns {RxRestCollection}\n   */\n  clone(): RxRestCollection<T> & T[] {\n    return new RxRestCollection<T>(\n      this.$route, this.$elements, this.config\n    ) as RxRestCollection<T> & T[]\n  }\n}\n\nexport class RxRest {\n  constructor(private config: RxRestConfiguration) {\n  }\n\n  one<T>(route: string, id?: any, ...suffix: string[]): RxRestItem<T> & T {\n    let r = new AbstractRxRest(this.config)\n    return r.one.call(r, route, id, suffix)\n  }\n\n  all<T>(route: string, asIterable: boolean = true): RxRestCollection<T> & T[] {\n    let r = new AbstractRxRest(this.config)\n    return r.all.call(r, route, asIterable)\n  }\n\n  fromObject<T>(route: string, element: T|T[], ...suffix: string[]):\n    (RxRestItem<T> & T) | (RxRestCollection<T> & T[]) {\n    let r = new AbstractRxRest(this.config)\n    return r.fromObject.call(r, route, element, suffix)\n  }\n}\n\nexport { RxRestConfiguration }\n"],"names":["target","$instance","$internal","concat","Object","getOwnPropertyNames","getOwnPropertySymbols","getPrototypeOf","p","attributes","indexOf","defineProperty","value","receiver","$pristine","map","item","key","Array","isArray","i","length","append","a","b","Math","random","toString","input","init","abortCallback","Request","req","superagent","method","toLowerCase","url","headers","header","set","Observable","fromPromise","text","mergeMap","send","body","create","observer","end","err","res","error","noContent","next","Response","complete","response","abort","Headers","URLSearchParams","fetch","undefined","FormData","RxRestItem","json","JSON","stringify","then","parse","metadata","_responseBodyHandler","responseBodyHandler","_requestBodyHandler","requestBodyHandler","base","charAt","$baseURL","params","$queryParams","objectToMap","$headers","config","RxRestConfiguration","route","$route","$metadata","uuid","$uuid","push","apply","split","id","addRoute","o","identifier","suffix","asIterable","RxRestCollection","$asIterable","element","queryParams","request","withBody","interceptors","origin","reduce","obs","interceptor","concatMap","result","of","Promise","requestOptions","requestHeaders","URL","requestQueryParams","stream","pipe","expandInterceptors","requestInterceptors","responseInterceptors","$fromServer","collection","e","catchError","errorInterceptors","_throw","baseURL","join","param","str","proxy","Proxy","$element","RxRestProxyHandler","plain","slice","clone","AbstractRxRest","elements","$elements","Symbol","iterator","index","done","r","one","call","all","fromObject"],"mappings":"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"}